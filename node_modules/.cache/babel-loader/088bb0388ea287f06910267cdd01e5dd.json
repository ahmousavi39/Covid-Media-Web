{"ast":null,"code":"var _jsxFileName = \"/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/components/Map/Map.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport useSWR from \"swr\";\nimport lookup from \"country-code-lookup\";\nimport \"./Map.scss\"; // Need mapbox css for tooltips later in the tutorial\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nmapboxgl.accessToken = \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\n\nfunction App() {\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  const fetcher = url => fetch(url).then(r => r.json()).then(data => data.map((point, index) => ({\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: [point.coordinates.longitude, point.coordinates.latitude]\n    },\n    properties: {\n      id: index,\n      country: point.country,\n      province: point.province,\n      cases: point.stats.confirmed,\n      deaths: point.stats.deaths\n    }\n  })));\n\n  const {\n    data\n  } = useSWR(\"https://corona.lmao.ninja/v2/jhucsse\", fetcher); // Initialize our map\n\n  useEffect(() => {\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: \"mapbox://styles/notalemesa/ck8dqwdum09ju1ioj65e3ql3k\",\n        center: [16, 27],\n        zoom: 1.8\n      }); // Add navigation controls to the top right of the canvas\n\n      map.addControl(new mapboxgl.NavigationControl());\n      map.once(\"load\", function () {\n        // Add our SOURCE\n        map.addSource(\"points\", {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: data\n          }\n        }); // Add our layer\n\n        map.addLayer({\n          id: \"circles\",\n          source: \"points\",\n          // this should be the id of source\n          type: \"circle\",\n          paint: {\n            \"circle-opacity\": 0.75,\n            \"circle-stroke-width\": [\"interpolate\", [\"linear\"], [\"get\", \"cases\"], 1, 1, 100000, 1.75],\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"get\", \"cases\"], 1, 4, 100000, 8, 400000, 10, 800000, 14, 1200000, 18, 10000000, 40],\n            \"circle-color\": [\"interpolate\", [\"linear\"], [\"get\", \"cases\"], 1, \"#ffffb2\", 5000, \"#fed976\", 10000, \"#feb24c\", 25000, \"#fd8d3c\", 50000, \"#fc4e2a\", 75000, \"#e31a1c\", 100000, \"#b10026\"]\n          }\n        });\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n        let lastId;\n        map.on(\"mousemove\", \"circles\", e => {\n          const id = e.features[0].properties.id;\n\n          if (id !== lastId) {\n            var _lookup$byCountry, _lookup$byInternet;\n\n            lastId = id;\n            const {\n              cases,\n              deaths,\n              country,\n              province\n            } = e.features[0].properties; // Change the pointer type on mouseenter\n\n            map.getCanvas().style.cursor = \"pointer\";\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const countryISO = ((_lookup$byCountry = lookup.byCountry(country)) === null || _lookup$byCountry === void 0 ? void 0 : _lookup$byCountry.iso2) || ((_lookup$byInternet = lookup.byInternet(country)) === null || _lookup$byInternet === void 0 ? void 0 : _lookup$byInternet.iso2);\n            const provinceHTML = province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\n            const mortalityRate = (deaths / cases * 100).toFixed(2);\n            const countryFlagHTML = Boolean(countryISO) ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>` : \"\";\n            const HTML = `<p>Country: <b>${country}</b></p>\n                ${provinceHTML}\n                <p>Cases: <b>${cases}</b></p>\n                <p>Deaths: <b>${deaths}</b></p>\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n                ${countryFlagHTML}`; // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\n          }\n        });\n        map.on(\"mouseleave\", \"circles\", function () {\n          lastId = undefined;\n          map.getCanvas().style.cursor = \"\";\n          popup.remove();\n        });\n      });\n    }\n  }, [data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"root\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapBox\",\n    ref: mapboxElRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/components/Map/Map.js"],"names":["React","useRef","useEffect","mapboxgl","useSWR","lookup","accessToken","App","mapboxElRef","fetcher","url","fetch","then","r","json","data","map","point","index","type","geometry","coordinates","longitude","latitude","properties","id","country","province","cases","stats","confirmed","deaths","Map","container","current","style","center","zoom","addControl","NavigationControl","once","addSource","features","addLayer","source","paint","popup","Popup","closeButton","closeOnClick","lastId","on","e","getCanvas","cursor","slice","countryISO","byCountry","iso2","byInternet","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","Math","abs","lngLat","lng","setLngLat","setHTML","addTo","undefined","remove"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport useSWR from \"swr\";\nimport lookup from \"country-code-lookup\";\nimport \"./Map.scss\";\n// Need mapbox css for tooltips later in the tutorial\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\n\nfunction App() {\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  const fetcher = url =>\n    fetch(url)\n      .then(r => r.json())\n      .then(data =>\n        data.map((point, index) => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [\n              point.coordinates.longitude,\n              point.coordinates.latitude\n            ]\n          },\n          properties: {\n            id: index,\n            country: point.country,\n            province: point.province,\n            cases: point.stats.confirmed,\n            deaths: point.stats.deaths\n          }\n        }))\n      );\n\n  const { data } = useSWR(\"https://corona.lmao.ninja/v2/jhucsse\", fetcher);\n\n  // Initialize our map\n  useEffect(() => {\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: \"mapbox://styles/notalemesa/ck8dqwdum09ju1ioj65e3ql3k\",\n        center: [16, 27],\n        zoom: 1.8\n      });\n\n      // Add navigation controls to the top right of the canvas\n      map.addControl(new mapboxgl.NavigationControl());\n\n      map.once(\"load\", function() {\n        // Add our SOURCE\n        map.addSource(\"points\", {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: data\n          }\n        });\n\n        // Add our layer\n        map.addLayer({\n          id: \"circles\",\n          source: \"points\", // this should be the id of source\n          type: \"circle\",\n          paint: {\n            \"circle-opacity\": 0.75,\n            \"circle-stroke-width\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              1,\n              100000,\n              1.75\n            ],\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              4,\n              100000,\n              8,\n              400000,\n              10,\n              800000,\n              14,\n              1200000,\n              18,\n              10000000,\n              40\n            ],\n            \"circle-color\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              \"#ffffb2\",\n              5000,\n              \"#fed976\",\n              10000,\n              \"#feb24c\",\n              25000,\n              \"#fd8d3c\",\n              50000,\n              \"#fc4e2a\",\n              75000,\n              \"#e31a1c\",\n              100000,\n              \"#b10026\"\n            ]\n          }\n        });\n\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n\n        let lastId;\n\n        map.on(\"mousemove\", \"circles\", e => {\n          const id = e.features[0].properties.id;\n\n          if (id !== lastId) {\n            lastId = id;\n            const {\n              cases,\n              deaths,\n              country,\n              province\n            } = e.features[0].properties;\n\n            // Change the pointer type on mouseenter\n            map.getCanvas().style.cursor = \"pointer\";\n\n            const coordinates = e.features[0].geometry.coordinates.slice();\n\n            const countryISO =\n              lookup.byCountry(country)?.iso2 ||\n              lookup.byInternet(country)?.iso2;\n            const provinceHTML =\n              province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n            const countryFlagHTML = Boolean(countryISO)\n              ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>`\n              : \"\";\n\n            const HTML = `<p>Country: <b>${country}</b></p>\n                ${provinceHTML}\n                <p>Cases: <b>${cases}</b></p>\n                <p>Deaths: <b>${deaths}</b></p>\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n                ${countryFlagHTML}`;\n\n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            popup\n              .setLngLat(coordinates)\n              .setHTML(HTML)\n              .addTo(map);\n          }\n        });\n\n        map.on(\"mouseleave\", \"circles\", function() {\n          lastId = undefined;\n          map.getCanvas().style.cursor = \"\";\n          popup.remove();\n        });\n      });\n    }\n  }, [data]);\n\n  return (\n    <div className='html'> \n      <div className='body'>\n      <div className='root'>\n    <div id=\"App\">\n      <div className=\"mapContainer\">\n        {/* Mapbox Container */}\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n    </div>\n  </div>\n  </div> \n   </div>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
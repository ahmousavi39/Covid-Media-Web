{"ast":null,"code":"var _jsxFileName = \"/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/components/Chart/Chart.jsx\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\nimport { useTranslation } from 'react-i18next';\nimport CanvasJSReact from '../../canvasjs-stock-1.2.10/canvasjs.stock.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSStockChart = CanvasJSReact.CanvasJSStockChart;\nexport function HistoricalData(props) {\n  const {\n    t\n  } = useTranslation();\n  var d = new Date();\n  var date = d.getDate();\n  var month = d.getMonth() + 1;\n  var year = d.getFullYear();\n  var firstMonth = month - 1;\n  var dateStr = year + \"-\" + month + \"-\" + date;\n  var firstDateStr = year + \"-\" + firstMonth + \"-\" + date;\n  const options = {\n    theme: \"light2\",\n    charts: [{\n      axisX: {\n        crosshair: {\n          enabled: true,\n          snapToDataPoint: true,\n          valueFormatString: \"MMM DD YYYY\"\n        }\n      },\n      toolTip: {\n        shared: true\n      },\n      data: [{\n        name: t('con.1'),\n        type: \"splineArea\",\n        color: \"rgba(0, 0, 255, 0.5)\",\n        yValueFormatString: \"##,###.##\",\n        xValueFormatString: \"MMM DD YYYY\",\n        dataPoints: props.data[0]\n      }, {\n        name: t('dea.1'),\n        type: \"splineArea\",\n        color: \"rgb(255, 3, 3)\",\n        yValueFormatString: \"##,###.##\",\n        xValueFormatString: \"MMM DD YYYY\",\n        dataPoints: props.data[1]\n      }, {\n        name: t('rec.1'),\n        type: \"splineArea\",\n        color: \"rgba(0, 255, 0, 0.5)\",\n        yValueFormatString: \"##,###.##\",\n        xValueFormatString: \"MMM DD YYYY\",\n        dataPoints: props.data[2]\n      }]\n    }],\n    navigator: {\n      slider: {\n        minimum: new Date(firstDateStr),\n        maximum: new Date(dateStr)\n      }\n    }\n  };\n  let containerProps;\n\n  if (window.innerWidth < 450) {\n    containerProps = {\n      width: \"100%\",\n      height: \"250px\"\n    };\n  } else {\n    containerProps = {\n      width: \"100%\",\n      height: \"300px\",\n      margin: \"auto\"\n    };\n  }\n\n  return props.data[0] && props.data[1] && props.data[2] ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CanvasJSStockChart, {\n    containerProps: containerProps,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, t('ChartType.1')))) : /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }\n  });\n}\nexport function Chart({\n  data: {\n    cases,\n    todayCases,\n    deaths,\n    todayDeaths,\n    recovered,\n    todayRecovered,\n    active\n  },\n  country,\n  isDaily\n}) {\n  const {\n    t\n  } = useTranslation();\n  const barChart = cases ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [t('con.1'), t('rec.1'), t('dea.1'), t('Active.1')],\n      datasets: [{\n        label: t('peo.1'),\n        backgroundColor: ['rgba(0,0,255,0.5', 'rgba(0,255,0,0.5)', 'rgb(255, 3, 3)', 'yellow', 'blue'],\n        data: [cases, recovered, deaths, active]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, t('ChartType.2')))) : /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"spinner-border\",\n    role: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    class: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  })));\n  const barChartDaily = todayCases ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [t('con.1'), t('rec.1'), t('dea.1')],\n      datasets: [{\n        label: t('peo.1'),\n        backgroundColor: ['rgba(0,0,255,0.5', 'rgba(0,255,0,0.5)', 'rgb(255, 3, 3)'],\n        data: [todayCases, todayRecovered, todayDeaths]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, t('ChartType.2'))))) : /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 10\n    }\n  }, t('DailyError.1'));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, isDaily ? barChartDaily : barChart);\n}","map":{"version":3,"sources":["/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/components/Chart/Chart.jsx"],"names":["React","Component","Bar","styles","useTranslation","CanvasJSReact","CanvasJS","CanvasJSStockChart","HistoricalData","props","t","d","Date","date","getDate","month","getMonth","year","getFullYear","firstMonth","dateStr","firstDateStr","options","theme","charts","axisX","crosshair","enabled","snapToDataPoint","valueFormatString","toolTip","shared","data","name","type","color","yValueFormatString","xValueFormatString","dataPoints","navigator","slider","minimum","maximum","containerProps","window","innerWidth","width","height","margin","container","Chart","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","country","isDaily","barChart","labels","datasets","label","backgroundColor","legend","display","title","text","barChartDaily"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\nimport { useTranslation } from 'react-i18next';\nimport CanvasJSReact from '../../canvasjs-stock-1.2.10/canvasjs.stock.react';\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSStockChart = CanvasJSReact.CanvasJSStockChart;\n\n\nexport function HistoricalData (props){\n  const { t } = useTranslation();\n\n    var d = new Date();\n    var date = d.getDate();\n    var month = d.getMonth() + 1;\n    var year = d.getFullYear();\n    var firstMonth = month - 1;\n\n    var dateStr = year + \"-\" + month + \"-\" + date;\n\n    var firstDateStr = year + \"-\" + firstMonth + \"-\" + date;\n\n    const options = {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"MMM DD YYYY\"\n          }\n        },\n        toolTip: {\n          shared: true\n        },\n\n        data: [{\n          name: t('con.1'),\n          type: \"splineArea\",\n          color: \"rgba(0, 0, 255, 0.5)\",\n          yValueFormatString: \"##,###.##\",\n          xValueFormatString: \"MMM DD YYYY\",\n          dataPoints: props.data[0]\n        },\n        {\n          name: t('dea.1'),\n          type: \"splineArea\",\n          color: \"rgb(255, 3, 3)\",\n          yValueFormatString: \"##,###.##\",\n          xValueFormatString: \"MMM DD YYYY\",\n          dataPoints: props.data[1]\n        },\n        {\n          name: t('rec.1'),\n          type: \"splineArea\",\n          color: \"rgba(0, 255, 0, 0.5)\",\n          yValueFormatString: \"##,###.##\",\n          xValueFormatString: \"MMM DD YYYY\",\n          dataPoints: props.data[2]\n        }\n        ]\n      }],\n      navigator: {\n        slider: {\n          minimum: new Date(firstDateStr),\n          maximum: new Date(dateStr)\n        }\n      }\n    };\n\n    let containerProps;\n    if (window.innerWidth < 450) {\n      containerProps = {\n        width: \"100%\",\n        height: \"250px\"\n      };\n    }else {\n      containerProps = {\n        width: \"100%\",\n        height: \"300px\",\n        margin: \"auto\"\n      };\n    }\n    return (\n      props.data[0] && props.data[1] && props.data[2] ? (\n        <>\n        <div className={styles.container}>\n          {\n            <CanvasJSStockChart containerProps={containerProps} options={options}\n            />\n          }\n        </div>\n        <br />\n        <ul>\n            <li>{t('ChartType.1')}</li>\n          </ul>\n        </>\n      ) : (<b></b>)\n    );\n  }\n\n\n\n\nexport function Chart(\n  { data: {\n    cases,\n    todayCases,\n    deaths,\n    todayDeaths,\n    recovered,\n    todayRecovered,\n    active },\n    country, isDaily }\n) {\n\n  const { t } = useTranslation();\n\n  const barChart = (\n    cases ? (\n      <>\n      <Bar\n        data={\n          {\n            labels: [t('con.1'), t('rec.1'), t('dea.1'), t('Active.1')],\n            datasets: [{\n              label: t('peo.1'),\n              backgroundColor: ['rgba(0,0,255,0.5', 'rgba(0,255,0,0.5)', 'rgb(255, 3, 3)', 'yellow', 'blue'],\n              data: [cases, recovered, deaths, active]\n            }]\n          }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `${country}` },\n        }}\n      />\n      <br />\n      <ul>\n            <li>{t('ChartType.2')}</li>\n          </ul>\n      </>\n    ) : (<b><div class=\"spinner-border\" role=\"status\">\n      <span class=\"sr-only\"></span>\n    </div></b>)\n  )\n\n\n  const barChartDaily = (\n    todayCases ? (\n      <>\n      <Bar\n        data={\n          {\n            labels: [t('con.1'), t('rec.1'), t('dea.1')],\n            datasets: [{\n              label: t('peo.1'),\n              backgroundColor: ['rgba(0,0,255,0.5', 'rgba(0,255,0,0.5)', 'rgb(255, 3, 3)'],\n              data: [todayCases, todayRecovered, todayDeaths]\n            }]\n          }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `${country}` },\n        }}\n      />\n      <br />\n      <br />\n      <div>\n            <ul>\n            <li>{t('ChartType.2')}</li>\n          </ul>\n          </div>\n      </>\n    ) : (<b>{t('DailyError.1')}</b>)\n  )\n\n\n\n  return (\n    <div className={styles.container}>\n      {\n        isDaily ? barChartDaily : barChart\n      }\n    </div>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
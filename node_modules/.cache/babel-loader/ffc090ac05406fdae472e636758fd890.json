{"ast":null,"code":"import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nvar pathname = window.location.pathname;\npathname.indexOf(1);\npathname.toLowerCase();\npathname = pathname.split(\"/\")[1];\nvar fallbackLng;\n\nif (pathname == 'per' || pathname == 'en' || pathname == 'gr' || pathname == 'tr') {\n  fallbackLng = [pathname];\n} else {\n  fallbackLng = ['en'];\n}\n\nconst availableLanguages = ['tr', 'en', 'per', 'gr' // , 'ar'\n];\nconst options = {\n  // order and from where user language should be detected\n  order: ['navigator', 'htmlTag', 'path', 'subdomain'],\n  // keys or params to lookup language from\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n  // cache user language on\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'],\n  // languages to not persist (cookie, localStorage)\n  // optional expire and domain for set cookie\n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement,\n  // only detect languages that are in the whitelist\n  checkWhitelist: true\n};\ni18n.use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\n// .use(LanguageDetector) // detect user language\n.use(initReactI18next) // pass the i18n instance to react-i18next.\n.init({\n  fallbackLng,\n  // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\n  debug: true,\n  whitelist: availableLanguages,\n  detection: options,\n  interpolation: {\n    escapeValue: false\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/i18n.js"],"names":["i18n","Backend","LanguageDetector","initReactI18next","pathname","window","location","indexOf","toLowerCase","split","fallbackLng","availableLanguages","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","use","init","debug","whitelist","detection","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,IAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBF,QAA/B;AAEAA,QAAQ,CAACG,OAAT,CAAiB,CAAjB;AAEAH,QAAQ,CAACI,WAAT;AAEAJ,QAAQ,GAAGA,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX;AAEA,IAAIC,WAAJ;;AAEA,IAAGN,QAAQ,IAAI,KAAZ,IAAqBA,QAAQ,IAAI,IAAjC,IAAyCA,QAAQ,IAAI,IAArD,IAA6DA,QAAQ,IAAI,IAA5E,EAAkF;AAC/EM,EAAAA,WAAW,GAAG,CAACN,QAAD,CAAd;AACF,CAFD,MAEK;AACFM,EAAAA,WAAW,GAAG,CAAC,IAAD,CAAd;AACF;;AAED,MAAMC,kBAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,IAApB,CAC3B;AAD2B,CAA3B;AAOA,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,KAAK,EAAE,CAAE,WAAF,EAAe,SAAf,EAA0B,MAA1B,EAAkC,WAAlC,CAFO;AAId;AACAC,EAAAA,iBAAiB,EAAE,KALL;AAMdC,EAAAA,YAAY,EAAE,SANA;AAOdC,EAAAA,kBAAkB,EAAE,YAPN;AAQdC,EAAAA,mBAAmB,EAAE,CARP;AASdC,EAAAA,wBAAwB,EAAE,CATZ;AAWd;AACAC,EAAAA,MAAM,EAAE,CAAC,cAAD,EAAiB,QAAjB,CAZM;AAadC,EAAAA,eAAe,EAAE,CAAC,QAAD,CAbH;AAae;AAE7B;AACAC,EAAAA,aAAa,EAAE,EAhBD;AAiBdC,EAAAA,YAAY,EAAE,UAjBA;AAmBd;AACAC,EAAAA,OAAO,EAAEC,QAAQ,CAACC,eApBJ;AAsBd;AACAC,EAAAA,cAAc,EAAE;AAvBF,CAAhB;AA0BA1B,IAAI,CACD2B,GADH,CACO1B,OADP,EACgB;AAEd;AAHF,CAKG0B,GALH,CAKOxB,gBALP,EAKyB;AALzB,CAOGyB,IAPH,CAOQ;AACJlB,EAAAA,WADI;AACS;AACbmB,EAAAA,KAAK,EAAE,IAFH;AAGJC,EAAAA,SAAS,EAAEnB,kBAHP;AAIJoB,EAAAA,SAAS,EAAEnB,OAJP;AAMJoB,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE;AADA;AANX,CAPR;AAkBA,eAAejC,IAAf","sourcesContent":["import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\nvar pathname = window.location.pathname;\n\npathname.indexOf(1);\n\npathname.toLowerCase();\n\npathname = pathname.split(\"/\")[1];\n\nvar fallbackLng ;\n\nif(pathname == 'per' || pathname == 'en' || pathname == 'gr' || pathname == 'tr' ){\n   fallbackLng = [pathname];\n}else{\n   fallbackLng = ['en'];\n}\n\nconst availableLanguages = ['tr', 'en', 'per', 'gr'\n// , 'ar'\n];\n\n\n\n\nconst options = {\n  // order and from where user language should be detected\n  order: [ 'navigator', 'htmlTag', 'path', 'subdomain'],\n\n  // keys or params to lookup language from\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n\n  // cache user language on\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\n\n  // optional expire and domain for set cookie\n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement,\n\n  // only detect languages that are in the whitelist\n  checkWhitelist: true\n}\n\ni18n\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\n\n  // .use(LanguageDetector) // detect user language\n\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\n\n  .init({\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\n    debug: true,\n    whitelist: availableLanguages,\n    detection: options,\n\n    interpolation: {\n      escapeValue: false\n    },\n  });\n\nexport default i18n;"]},"metadata":{},"sourceType":"module"}
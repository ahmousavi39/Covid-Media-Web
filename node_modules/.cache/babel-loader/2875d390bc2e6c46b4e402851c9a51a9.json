{"ast":null,"code":"import _toConsumableArray from \"/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useContext, useEffect, useLayoutEffect, useState, useRef, useMemo } from 'react';\nimport defaultConfig, { cacheGet, cacheSet, CACHE_REVALIDATORS, CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, MUTATION_TS } from './config';\nimport hash from './libs/hash';\nimport isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online';\nimport throttle from './libs/throttle';\nimport SWRConfigContext from './swr-config-context';\nvar IS_SERVER = typeof window === 'undefined'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n\nvar useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect; // TODO: introduce namepsace for the cache\n\nvar getErrorKey = function getErrorKey(key) {\n  return key ? 'err@' + key : '';\n};\n\nvar getKeyArgs = function getKeyArgs(key) {\n  var args = null;\n\n  if (typeof key === 'function') {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n\n  if (Array.isArray(key)) {\n    // args array\n    args = key;\n    key = hash(key);\n  } else {\n    // convert null to ''\n    key = String(key || '');\n  }\n\n  return [key, args];\n};\n\nvar NO_DEDUPE = false;\n\nvar trigger = function trigger(_key) {\n  var shouldRevalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  var _getKeyArgs = getKeyArgs(_key),\n      _getKeyArgs2 = _slicedToArray(_getKeyArgs, 1),\n      key = _getKeyArgs2[0];\n\n  if (!key) return;\n  var updaters = CACHE_REVALIDATORS[key];\n\n  if (key && updaters) {\n    var currentData = cacheGet(key);\n    var currentError = cacheGet(getErrorKey(key));\n\n    for (var i = 0; i < updaters.length; ++i) {\n      updaters[i](shouldRevalidate, currentData, currentError, NO_DEDUPE);\n    }\n  }\n};\n\nvar broadcastState = function broadcastState(key, data, error) {\n  var updaters = CACHE_REVALIDATORS[key];\n\n  if (key && updaters) {\n    for (var i = 0; i < updaters.length; ++i) {\n      updaters[i](false, data, error);\n    }\n  }\n};\n\nvar mutate = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_key, _data) {\n    var shouldRevalidate,\n        _getKeyArgs3,\n        _getKeyArgs4,\n        key,\n        data,\n        error,\n        updaters,\n        i,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            shouldRevalidate = _args.length > 2 && _args[2] !== undefined ? _args[2] : true;\n            _getKeyArgs3 = getKeyArgs(_key), _getKeyArgs4 = _slicedToArray(_getKeyArgs3, 1), key = _getKeyArgs4[0];\n\n            if (key) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            if (!(typeof _data === 'undefined')) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", trigger(_key, shouldRevalidate));\n\n          case 6:\n            // update timestamp\n            MUTATION_TS[key] = Date.now() - 1;\n\n            if (!(_data && typeof _data === 'function')) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.prev = 8;\n            _context.next = 11;\n            return _data(cacheGet(key));\n\n          case 11:\n            data = _context.sent;\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](8);\n            error = _context.t0;\n\n          case 17:\n            _context.next = 32;\n            break;\n\n          case 19:\n            if (!(_data && typeof _data.then === 'function')) {\n              _context.next = 31;\n              break;\n            }\n\n            _context.prev = 20;\n            _context.next = 23;\n            return _data;\n\n          case 23:\n            data = _context.sent;\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t1 = _context[\"catch\"](20);\n            error = _context.t1;\n\n          case 29:\n            _context.next = 32;\n            break;\n\n          case 31:\n            data = _data;\n\n          case 32:\n            if (typeof data !== 'undefined') {\n              // update cached data\n              cacheSet(key, data);\n            } // update existing SWR Hooks' state\n\n\n            updaters = CACHE_REVALIDATORS[key];\n\n            if (updaters) {\n              for (i = 0; i < updaters.length; ++i) {\n                updaters[i](!!shouldRevalidate, data, error, NO_DEDUPE);\n              }\n            } // throw error or return data to be used by caller of mutate\n\n\n            if (!error) {\n              _context.next = 37;\n              break;\n            }\n\n            throw error;\n\n          case 37:\n            return _context.abrupt(\"return\", data);\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 14], [20, 26]]);\n  }));\n\n  return function mutate(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction useSWR() {\n  var _key,\n      fn,\n      config = {};\n\n  if (arguments.length >= 1) {\n    _key = arguments.length <= 0 ? undefined : arguments[0];\n  }\n\n  if (arguments.length > 2) {\n    fn = arguments.length <= 1 ? undefined : arguments[1];\n    config = arguments.length <= 2 ? undefined : arguments[2];\n  } else {\n    if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'function') {\n      fn = arguments.length <= 1 ? undefined : arguments[1];\n    } else if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'object') {\n      config = arguments.length <= 1 ? undefined : arguments[1];\n    }\n  } // we assume `key` as the identifier of the request\n  // `key` can change but `fn` shouldn't\n  // (because `revalidate` only depends on `key`)\n\n\n  var _getKeyArgs5 = getKeyArgs(_key),\n      _getKeyArgs6 = _slicedToArray(_getKeyArgs5, 2),\n      key = _getKeyArgs6[0],\n      fnArgs = _getKeyArgs6[1]; // `keyErr` is the cache key for error objects\n\n\n  var keyErr = getErrorKey(key);\n  config = Object.assign({}, defaultConfig, useContext(SWRConfigContext), config);\n\n  if (typeof fn === 'undefined') {\n    // use a global fetcher\n    fn = config.fetcher;\n  }\n\n  var initialData = cacheGet(key) || config.initialData;\n  var initialError = cacheGet(keyErr); // if a state is accessed (data, error or isValidating),\n  // we add the state to dependencies so if the state is\n  // updated in the future, we can trigger a rerender\n\n  var stateDependencies = useRef({\n    data: false,\n    error: false,\n    isValidating: false\n  });\n  var stateRef = useRef({\n    data: initialData,\n    error: initialError,\n    isValidating: false\n  });\n  var rerender = useState(null)[1];\n  var dispatch = useCallback(function (payload) {\n    var shouldUpdateState = false;\n\n    for (var k in payload) {\n      stateRef.current[k] = payload[k];\n\n      if (stateDependencies.current[k]) {\n        shouldUpdateState = true;\n      }\n    }\n\n    if (shouldUpdateState || config.suspense) {\n      rerender({});\n    }\n  }, []); // error ref inside revalidate (is last request errored?)\n\n  var unmountedRef = useRef(false);\n  var keyRef = useRef(key);\n  var boundMutate = useCallback(function (data, shouldRevalidate) {\n    return mutate(key, data, shouldRevalidate);\n  }, [key]); // start a revalidation\n\n  var revalidate = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var revalidateOpts,\n        loading,\n        shouldDeduping,\n        newData,\n        startAt,\n        newState,\n        retryCount,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            revalidateOpts = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n            if (!(!key || !fn)) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 3:\n            if (!unmountedRef.current) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 5:\n            revalidateOpts = Object.assign({\n              dedupe: false\n            }, revalidateOpts);\n            loading = true;\n            shouldDeduping = typeof CONCURRENT_PROMISES[key] !== 'undefined' && revalidateOpts.dedupe; // start fetching\n\n            _context2.prev = 8;\n            dispatch({\n              isValidating: true\n            });\n\n            if (!shouldDeduping) {\n              _context2.next = 17;\n              break;\n            }\n\n            // there's already an ongoing request,\n            // this one needs to be deduplicated.\n            startAt = CONCURRENT_PROMISES_TS[key];\n            _context2.next = 14;\n            return CONCURRENT_PROMISES[key];\n\n          case 14:\n            newData = _context2.sent;\n            _context2.next = 26;\n            break;\n\n          case 17:\n            // if not deduping the request (hard revalidate) but\n            // there're other ongoing request(s) at the same time,\n            // we need to ignore the other result(s) to avoid\n            // possible race conditions:\n            // req1------------------>res1\n            //      req2-------->res2\n            // in that case, the second response should not be overridden\n            // by the first one.\n            if (CONCURRENT_PROMISES[key]) {\n              // we can mark it as a mutation to ignore\n              // all requests which are fired before this one\n              MUTATION_TS[key] = Date.now() - 1;\n            } // if no cache being rendered currently (it shows a blank page),\n            // we trigger the loading slow event.\n\n\n            if (config.loadingTimeout && !cacheGet(key)) {\n              setTimeout(function () {\n                if (loading) config.onLoadingSlow(key, config);\n              }, config.loadingTimeout);\n            }\n\n            if (fnArgs !== null) {\n              CONCURRENT_PROMISES[key] = fn.apply(void 0, _toConsumableArray(fnArgs));\n            } else {\n              CONCURRENT_PROMISES[key] = fn(key);\n            }\n\n            CONCURRENT_PROMISES_TS[key] = startAt = Date.now();\n            _context2.next = 23;\n            return CONCURRENT_PROMISES[key];\n\n          case 23:\n            newData = _context2.sent;\n            setTimeout(function () {\n              delete CONCURRENT_PROMISES[key];\n              delete CONCURRENT_PROMISES_TS[key];\n            }, config.dedupingInterval); // trigger the success event,\n            // only do this for the original request.\n\n            config.onSuccess(newData, key, config);\n\n          case 26:\n            if (!(MUTATION_TS[key] && startAt <= MUTATION_TS[key])) {\n              _context2.next = 29;\n              break;\n            }\n\n            dispatch({\n              isValidating: false\n            });\n            return _context2.abrupt(\"return\", false);\n\n          case 29:\n            cacheSet(key, newData);\n            cacheSet(keyErr, undefined);\n            keyRef.current = key; // new state for the reducer\n\n            newState = {\n              isValidating: false\n            };\n\n            if (typeof stateRef.current.error !== 'undefined') {\n              // we don't have an error\n              newState.error = undefined;\n            }\n\n            if (config.compare(stateRef.current.data, newData)) {// deep compare to avoid extra re-render\n              // do nothing\n            } else {\n              // data changed\n              newState.data = newData;\n            } // merge the new state\n\n\n            dispatch(newState);\n\n            if (!shouldDeduping) {\n              // also update other hooks\n              broadcastState(key, newData, undefined);\n            }\n\n            _context2.next = 48;\n            break;\n\n          case 39:\n            _context2.prev = 39;\n            _context2.t0 = _context2[\"catch\"](8);\n            delete CONCURRENT_PROMISES[key];\n            delete CONCURRENT_PROMISES_TS[key];\n            cacheSet(keyErr, _context2.t0);\n            keyRef.current = key; // get a new error\n            // don't use deep equal for errors\n\n            if (stateRef.current.error !== _context2.t0) {\n              // we keep the stale data\n              dispatch({\n                isValidating: false,\n                error: _context2.t0\n              });\n\n              if (!shouldDeduping) {\n                // also broadcast to update other hooks\n                broadcastState(key, undefined, _context2.t0);\n              }\n            } // events and retry\n\n\n            config.onError(_context2.t0, key, config);\n\n            if (config.shouldRetryOnError) {\n              // when retrying, we always enable deduping\n              retryCount = (revalidateOpts.retryCount || 0) + 1;\n              config.onErrorRetry(_context2.t0, key, config, revalidate, Object.assign({\n                dedupe: true\n              }, revalidateOpts, {\n                retryCount: retryCount\n              }));\n            }\n\n          case 48:\n            loading = false;\n            return _context2.abrupt(\"return\", true);\n\n          case 50:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[8, 39]]);\n  })), [key]); // mounted (client side rendering)\n\n  useIsomorphicLayoutEffect(function () {\n    if (!key) return undefined; // after `key` updates, we need to mark it as mounted\n\n    unmountedRef.current = false; // after the component is mounted (hydrated),\n    // we need to update the data from the cache\n    // and trigger a revalidation\n\n    var currentHookData = stateRef.current.data;\n    var latestKeyedData = cacheGet(key) || config.initialData; // update the state if the key changed or cache updated\n\n    if (keyRef.current !== key || !config.compare(currentHookData, latestKeyedData)) {\n      dispatch({\n        data: latestKeyedData\n      });\n      keyRef.current = key;\n    } // revalidate with deduping\n\n\n    var softRevalidate = function softRevalidate() {\n      return revalidate({\n        dedupe: true\n      });\n    }; // trigger a revalidation\n\n\n    if (!config.initialData) {\n      if (typeof latestKeyedData !== 'undefined' && !IS_SERVER && window['requestIdleCallback']) {\n        // delay revalidate if there's cache\n        // to not block the rendering\n        window['requestIdleCallback'](softRevalidate);\n      } else {\n        softRevalidate();\n      }\n    } // whenever the window gets focused, revalidate\n\n\n    var onFocus;\n\n    if (config.revalidateOnFocus) {\n      // throttle: avoid being called twice from both listeners\n      // and tabs being switched quickly\n      onFocus = throttle(softRevalidate, config.focusThrottleInterval);\n\n      if (!FOCUS_REVALIDATORS[key]) {\n        FOCUS_REVALIDATORS[key] = [onFocus];\n      } else {\n        FOCUS_REVALIDATORS[key].push(onFocus);\n      }\n    } // register global cache update listener\n\n\n    var onUpdate = function onUpdate() {\n      var shouldRevalidate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var updatedData = arguments.length > 1 ? arguments[1] : undefined;\n      var updatedError = arguments.length > 2 ? arguments[2] : undefined;\n      var dedupe = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      // update hook state\n      var newState = {};\n      var needUpdate = false;\n\n      if (typeof updatedData !== 'undefined' && !config.compare(stateRef.current.data, updatedData)) {\n        newState.data = updatedData;\n        needUpdate = true;\n      } // always update error\n      // because it can be `undefined`\n\n\n      if (stateRef.current.error !== updatedError) {\n        newState.error = updatedError;\n        needUpdate = true;\n      }\n\n      if (needUpdate) {\n        dispatch(newState);\n      }\n\n      keyRef.current = key;\n\n      if (shouldRevalidate) {\n        if (dedupe) {\n          return softRevalidate();\n        } else {\n          return revalidate();\n        }\n      }\n\n      return false;\n    }; // add updater to listeners\n\n\n    if (!CACHE_REVALIDATORS[key]) {\n      CACHE_REVALIDATORS[key] = [onUpdate];\n    } else {\n      CACHE_REVALIDATORS[key].push(onUpdate);\n    } // set up reconnecting when the browser regains network connection\n\n\n    var reconnect = null;\n\n    if (typeof addEventListener !== 'undefined' && config.revalidateOnReconnect) {\n      reconnect = addEventListener('online', softRevalidate);\n    }\n\n    return function () {\n      // cleanup\n      dispatch = function dispatch() {\n        return null;\n      }; // mark it as unmounted\n\n\n      unmountedRef.current = true;\n\n      if (onFocus && FOCUS_REVALIDATORS[key]) {\n        var revalidators = FOCUS_REVALIDATORS[key];\n        var index = revalidators.indexOf(onFocus);\n\n        if (index >= 0) {\n          // 10x faster than splice\n          // https://jsperf.com/array-remove-by-index\n          revalidators[index] = revalidators[revalidators.length - 1];\n          revalidators.pop();\n        }\n      }\n\n      if (CACHE_REVALIDATORS[key]) {\n        var _revalidators = CACHE_REVALIDATORS[key];\n\n        var _index = _revalidators.indexOf(onUpdate);\n\n        if (_index >= 0) {\n          _revalidators[_index] = _revalidators[_revalidators.length - 1];\n\n          _revalidators.pop();\n        }\n      }\n\n      if (typeof removeEventListener !== 'undefined' && reconnect !== null) {\n        removeEventListener('online', reconnect);\n      }\n    };\n  }, [key, revalidate]); // set up polling\n\n  useIsomorphicLayoutEffect(function () {\n    var timer = null;\n\n    var tick = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(!stateRef.current.error && (config.refreshWhenHidden || isDocumentVisible()) && !config.refreshWhenOffline && isOnline())) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return revalidate({\n                  dedupe: true\n                });\n\n              case 3:\n                if (config.refreshInterval) {\n                  timer = setTimeout(tick, config.refreshInterval);\n                }\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function tick() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    if (config.refreshInterval) {\n      timer = setTimeout(tick, config.refreshInterval);\n    }\n\n    return function () {\n      if (timer) clearTimeout(timer);\n    };\n  }, [config.refreshInterval, config.refreshWhenHidden, config.refreshWhenOffline, revalidate]); // suspense\n\n  if (config.suspense) {\n    if (IS_SERVER) throw new Error('Suspense on server side is not yet supported!'); // in suspense mode, we can't return empty state\n    // (it should be suspended)\n    // try to get data and error from cache\n\n    var latestData = cacheGet(key);\n    var latestError = cacheGet(keyErr);\n\n    if (typeof latestData === 'undefined' && typeof latestError === 'undefined') {\n      // need to start the request if it hasn't\n      if (!CONCURRENT_PROMISES[key]) {\n        // trigger revalidate immediately\n        // to get the promise\n        revalidate();\n      }\n\n      if (CONCURRENT_PROMISES[key] && typeof CONCURRENT_PROMISES[key].then === 'function') {\n        // if it is a promise\n        throw CONCURRENT_PROMISES[key];\n      } // it's a value, return it directly (override)\n\n\n      latestData = CONCURRENT_PROMISES[key];\n    }\n\n    if (typeof latestData === 'undefined' && latestError) {\n      // in suspense mode, throw error if there's no content\n      throw latestError;\n    } // return the latest data / error from cache\n    // in case `key` has changed\n\n\n    return {\n      error: latestError,\n      data: latestData,\n      revalidate: revalidate,\n      mutate: boundMutate,\n      isValidating: stateRef.current.isValidating\n    };\n  } // define returned state\n  // can be memorized since the state is a ref\n\n\n  return useMemo(function () {\n    var state = {\n      revalidate: revalidate,\n      mutate: boundMutate\n    };\n    Object.defineProperties(state, {\n      error: {\n        // `key` might be changed in the upcoming hook re-render,\n        // but the previous state will stay\n        // so we need to match the latest key and data (fallback to `initialData`)\n        get: function get() {\n          stateDependencies.current.error = true;\n          return keyRef.current === key ? stateRef.current.error : initialError;\n        }\n      },\n      data: {\n        get: function get() {\n          stateDependencies.current.data = true;\n          return keyRef.current === key ? stateRef.current.data : initialData;\n        }\n      },\n      isValidating: {\n        get: function get() {\n          stateDependencies.current.isValidating = true;\n          return stateRef.current.isValidating;\n        }\n      }\n    });\n    return state;\n  }, [revalidate]);\n}\n\nvar SWRConfig = SWRConfigContext.Provider;\nexport { trigger, mutate, SWRConfig };\nexport default useSWR;","map":{"version":3,"sources":["/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/node_modules/swr/esm/use-swr.js"],"names":["useCallback","useContext","useEffect","useLayoutEffect","useState","useRef","useMemo","defaultConfig","cacheGet","cacheSet","CACHE_REVALIDATORS","CONCURRENT_PROMISES","CONCURRENT_PROMISES_TS","FOCUS_REVALIDATORS","MUTATION_TS","hash","isDocumentVisible","isOnline","throttle","SWRConfigContext","IS_SERVER","window","useIsomorphicLayoutEffect","getErrorKey","key","getKeyArgs","args","err","Array","isArray","String","NO_DEDUPE","trigger","_key","shouldRevalidate","updaters","currentData","currentError","i","length","broadcastState","data","error","mutate","_data","Date","now","then","useSWR","fn","config","fnArgs","keyErr","Object","assign","fetcher","initialData","initialError","stateDependencies","isValidating","stateRef","rerender","dispatch","payload","shouldUpdateState","k","current","suspense","unmountedRef","keyRef","boundMutate","revalidate","revalidateOpts","dedupe","loading","shouldDeduping","startAt","newData","loadingTimeout","setTimeout","onLoadingSlow","dedupingInterval","onSuccess","undefined","newState","compare","onError","shouldRetryOnError","retryCount","onErrorRetry","currentHookData","latestKeyedData","softRevalidate","onFocus","revalidateOnFocus","focusThrottleInterval","push","onUpdate","updatedData","updatedError","needUpdate","reconnect","addEventListener","revalidateOnReconnect","revalidators","index","indexOf","pop","removeEventListener","timer","tick","refreshWhenHidden","refreshWhenOffline","refreshInterval","clearTimeout","Error","latestData","latestError","state","defineProperties","get","SWRConfig","Provider"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,eAA7C,EAA8DC,QAA9D,EAAwEC,MAAxE,EAAgFC,OAAhF,QAA+F,OAA/F;AACA,OAAOC,aAAP,IAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,kBAA5C,EAAgEC,mBAAhE,EAAqFC,sBAArF,EAA6GC,kBAA7G,EAAiIC,WAAjI,QAAoJ,UAApJ;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,IAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC,C,CACA;AACA;AACA;;AACA,IAAMC,yBAAyB,GAAGF,SAAS,GAAGlB,SAAH,GAAeC,eAA1D,C,CACA;;AACA,IAAMoB,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG;AAAA,SAAKA,GAAG,GAAG,SAASA,GAAZ,GAAkB,EAA1B;AAAA,CAAvB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAD,GAAG,EAAI;AACtB,MAAIE,IAAI,GAAG,IAAX;;AACA,MAAI,OAAOF,GAAP,KAAe,UAAnB,EAA+B;AAC3B,QAAI;AACAA,MAAAA,GAAG,GAAGA,GAAG,EAAT;AACH,KAFD,CAGA,OAAOG,GAAP,EAAY;AACR;AACAH,MAAAA,GAAG,GAAG,EAAN;AACH;AACJ;;AACD,MAAII,KAAK,CAACC,OAAN,CAAcL,GAAd,CAAJ,EAAwB;AACpB;AACAE,IAAAA,IAAI,GAAGF,GAAP;AACAA,IAAAA,GAAG,GAAGT,IAAI,CAACS,GAAD,CAAV;AACH,GAJD,MAKK;AACD;AACAA,IAAAA,GAAG,GAAGM,MAAM,CAACN,GAAG,IAAI,EAAR,CAAZ;AACH;;AACD,SAAO,CAACA,GAAD,EAAME,IAAN,CAAP;AACH,CArBD;;AAsBA,IAAMK,SAAS,GAAG,KAAlB;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAmC;AAAA,MAA5BC,gBAA4B,uEAAT,IAAS;;AAAA,oBACjCT,UAAU,CAACQ,IAAD,CADuB;AAAA;AAAA,MACxCT,GADwC;;AAE/C,MAAI,CAACA,GAAL,EACI;AACJ,MAAMW,QAAQ,GAAGzB,kBAAkB,CAACc,GAAD,CAAnC;;AACA,MAAIA,GAAG,IAAIW,QAAX,EAAqB;AACjB,QAAMC,WAAW,GAAG5B,QAAQ,CAACgB,GAAD,CAA5B;AACA,QAAMa,YAAY,GAAG7B,QAAQ,CAACe,WAAW,CAACC,GAAD,CAAZ,CAA7B;;AACA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACtCH,MAAAA,QAAQ,CAACG,CAAD,CAAR,CAAYJ,gBAAZ,EAA8BE,WAA9B,EAA2CC,YAA3C,EAAyDN,SAAzD;AACH;AACJ;AACJ,CAZD;;AAaA,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAAChB,GAAD,EAAMiB,IAAN,EAAYC,KAAZ,EAAsB;AACzC,MAAMP,QAAQ,GAAGzB,kBAAkB,CAACc,GAAD,CAAnC;;AACA,MAAIA,GAAG,IAAIW,QAAX,EAAqB;AACjB,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACtCH,MAAAA,QAAQ,CAACG,CAAD,CAAR,CAAY,KAAZ,EAAmBG,IAAnB,EAAyBC,KAAzB;AACH;AACJ;AACJ,CAPD;;AAQA,IAAMC,MAAM;AAAA,sEAAG,iBAAOV,IAAP,EAAaW,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoBV,YAAAA,gBAApB,2DAAuC,IAAvC;AAAA,2BACGT,UAAU,CAACQ,IAAD,CADb,kDACJT,GADI;;AAAA,gBAENA,GAFM;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAKP,OAAOoB,KAAP,KAAiB,WALV;AAAA;AAAA;AAAA;;AAAA,6CAMAZ,OAAO,CAACC,IAAD,EAAOC,gBAAP,CANP;;AAAA;AAOX;AACApB,YAAAA,WAAW,CAACU,GAAD,CAAX,GAAmBqB,IAAI,CAACC,GAAL,KAAa,CAAhC;;AARW,kBAUPF,KAAK,IAAI,OAAOA,KAAP,KAAiB,UAVnB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAaUA,KAAK,CAACpC,QAAQ,CAACgB,GAAD,CAAT,CAbf;;AAAA;AAaHiB,YAAAA,IAbG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBHC,YAAAA,KAAK,cAAL;;AAhBG;AAAA;AAAA;;AAAA;AAAA,kBAmBFE,KAAK,IAAI,OAAOA,KAAK,CAACG,IAAb,KAAsB,UAnB7B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAsBUH,KAtBV;;AAAA;AAsBHH,YAAAA,IAtBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBHC,YAAAA,KAAK,cAAL;;AAzBG;AAAA;AAAA;;AAAA;AA6BPD,YAAAA,IAAI,GAAGG,KAAP;;AA7BO;AA+BX,gBAAI,OAAOH,IAAP,KAAgB,WAApB,EAAiC;AAC7B;AACAhC,cAAAA,QAAQ,CAACe,GAAD,EAAMiB,IAAN,CAAR;AACH,aAlCU,CAmCX;;;AACMN,YAAAA,QApCK,GAoCMzB,kBAAkB,CAACc,GAAD,CApCxB;;AAqCX,gBAAIW,QAAJ,EAAc;AACV,mBAASG,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACtCH,gBAAAA,QAAQ,CAACG,CAAD,CAAR,CAAY,CAAC,CAACJ,gBAAd,EAAgCO,IAAhC,EAAsCC,KAAtC,EAA6CX,SAA7C;AACH;AACJ,aAzCU,CA0CX;;;AA1CW,iBA2CPW,KA3CO;AAAA;AAAA;AAAA;;AAAA,kBA4CDA,KA5CC;;AAAA;AAAA,6CA6CJD,IA7CI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANE,MAAM;AAAA;AAAA;AAAA,GAAZ;;AA+CA,SAASK,MAAT,GAAyB;AACrB,MAAIf,IAAJ;AAAA,MAAUgB,EAAV;AAAA,MAAcC,MAAM,GAAG,EAAvB;;AACA,MAAI,UAAKX,MAAL,IAAe,CAAnB,EAAsB;AAClBN,IAAAA,IAAI,mDAAJ;AACH;;AACD,MAAI,UAAKM,MAAL,GAAc,CAAlB,EAAqB;AACjBU,IAAAA,EAAE,mDAAF;AACAC,IAAAA,MAAM,mDAAN;AACH,GAHD,MAIK;AACD,QAAI,8DAAmB,UAAvB,EAAmC;AAC/BD,MAAAA,EAAE,mDAAF;AACH,KAFD,MAGK,IAAI,8DAAmB,QAAvB,EAAiC;AAClCC,MAAAA,MAAM,mDAAN;AACH;AACJ,GAhBoB,CAiBrB;AACA;AACA;;;AAnBqB,qBAoBCzB,UAAU,CAACQ,IAAD,CApBX;AAAA;AAAA,MAoBdT,GApBc;AAAA,MAoBT2B,MApBS,oBAqBrB;;;AACA,MAAMC,MAAM,GAAG7B,WAAW,CAACC,GAAD,CAA1B;AACA0B,EAAAA,MAAM,GAAGG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB/C,aAAlB,EAAiCN,UAAU,CAACkB,gBAAD,CAA3C,EAA+D+B,MAA/D,CAAT;;AACA,MAAI,OAAOD,EAAP,KAAc,WAAlB,EAA+B;AAC3B;AACAA,IAAAA,EAAE,GAAGC,MAAM,CAACK,OAAZ;AACH;;AACD,MAAMC,WAAW,GAAGhD,QAAQ,CAACgB,GAAD,CAAR,IAAiB0B,MAAM,CAACM,WAA5C;AACA,MAAMC,YAAY,GAAGjD,QAAQ,CAAC4C,MAAD,CAA7B,CA7BqB,CA8BrB;AACA;AACA;;AACA,MAAMM,iBAAiB,GAAGrD,MAAM,CAAC;AAC7BoC,IAAAA,IAAI,EAAE,KADuB;AAE7BC,IAAAA,KAAK,EAAE,KAFsB;AAG7BiB,IAAAA,YAAY,EAAE;AAHe,GAAD,CAAhC;AAKA,MAAMC,QAAQ,GAAGvD,MAAM,CAAC;AACpBoC,IAAAA,IAAI,EAAEe,WADc;AAEpBd,IAAAA,KAAK,EAAEe,YAFa;AAGpBE,IAAAA,YAAY,EAAE;AAHM,GAAD,CAAvB;AAKA,MAAME,QAAQ,GAAGzD,QAAQ,CAAC,IAAD,CAAR,CAAe,CAAf,CAAjB;AACA,MAAI0D,QAAQ,GAAG9D,WAAW,CAAC,UAAA+D,OAAO,EAAI;AAClC,QAAIC,iBAAiB,GAAG,KAAxB;;AACA,SAAK,IAAIC,CAAT,IAAcF,OAAd,EAAuB;AACnBH,MAAAA,QAAQ,CAACM,OAAT,CAAiBD,CAAjB,IAAsBF,OAAO,CAACE,CAAD,CAA7B;;AACA,UAAIP,iBAAiB,CAACQ,OAAlB,CAA0BD,CAA1B,CAAJ,EAAkC;AAC9BD,QAAAA,iBAAiB,GAAG,IAApB;AACH;AACJ;;AACD,QAAIA,iBAAiB,IAAId,MAAM,CAACiB,QAAhC,EAA0C;AACtCN,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,GAXyB,EAWvB,EAXuB,CAA1B,CA5CqB,CAwDrB;;AACA,MAAMO,YAAY,GAAG/D,MAAM,CAAC,KAAD,CAA3B;AACA,MAAMgE,MAAM,GAAGhE,MAAM,CAACmB,GAAD,CAArB;AACA,MAAM8C,WAAW,GAAGtE,WAAW,CAAC,UAACyC,IAAD,EAAOP,gBAAP,EAA4B;AACxD,WAAOS,MAAM,CAACnB,GAAD,EAAMiB,IAAN,EAAYP,gBAAZ,CAAb;AACH,GAF8B,EAE5B,CAACV,GAAD,CAF4B,CAA/B,CA3DqB,CA8DrB;;AACA,MAAM+C,UAAU,GAAGvE,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOwE,YAAAA,cAAP,8DAAwB,EAAxB;;AAAA,kBACvB,CAAChD,GAAD,IAAQ,CAACyB,EADc;AAAA;AAAA;AAAA;;AAAA,8CAEhB,KAFgB;;AAAA;AAAA,iBAGvBmB,YAAY,CAACF,OAHU;AAAA;AAAA;AAAA;;AAAA,8CAIhB,KAJgB;;AAAA;AAK3BM,YAAAA,cAAc,GAAGnB,MAAM,CAACC,MAAP,CAAc;AAAEmB,cAAAA,MAAM,EAAE;AAAV,aAAd,EAAiCD,cAAjC,CAAjB;AACIE,YAAAA,OANuB,GAMb,IANa;AAOvBC,YAAAA,cAPuB,GAON,OAAOhE,mBAAmB,CAACa,GAAD,CAA1B,KAAoC,WAApC,IAAmDgD,cAAc,CAACC,MAP5D,EAQ3B;;AAR2B;AAUvBX,YAAAA,QAAQ,CAAC;AACLH,cAAAA,YAAY,EAAE;AADT,aAAD,CAAR;;AAVuB,iBAenBgB,cAfmB;AAAA;AAAA;AAAA;;AAgBnB;AACA;AACAC,YAAAA,OAAO,GAAGhE,sBAAsB,CAACY,GAAD,CAAhC;AAlBmB;AAAA,mBAmBHb,mBAAmB,CAACa,GAAD,CAnBhB;;AAAA;AAmBnBqD,YAAAA,OAnBmB;AAAA;AAAA;;AAAA;AAsBnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAIlE,mBAAmB,CAACa,GAAD,CAAvB,EAA8B;AAC1B;AACA;AACAV,cAAAA,WAAW,CAACU,GAAD,CAAX,GAAmBqB,IAAI,CAACC,GAAL,KAAa,CAAhC;AACH,aAlCkB,CAmCnB;AACA;;;AACA,gBAAII,MAAM,CAAC4B,cAAP,IAAyB,CAACtE,QAAQ,CAACgB,GAAD,CAAtC,EAA6C;AACzCuD,cAAAA,UAAU,CAAC,YAAM;AACb,oBAAIL,OAAJ,EACIxB,MAAM,CAAC8B,aAAP,CAAqBxD,GAArB,EAA0B0B,MAA1B;AACP,eAHS,EAGPA,MAAM,CAAC4B,cAHA,CAAV;AAIH;;AACD,gBAAI3B,MAAM,KAAK,IAAf,EAAqB;AACjBxC,cAAAA,mBAAmB,CAACa,GAAD,CAAnB,GAA2ByB,EAAE,MAAF,4BAAME,MAAN,EAA3B;AACH,aAFD,MAGK;AACDxC,cAAAA,mBAAmB,CAACa,GAAD,CAAnB,GAA2ByB,EAAE,CAACzB,GAAD,CAA7B;AACH;;AACDZ,YAAAA,sBAAsB,CAACY,GAAD,CAAtB,GAA8BoD,OAAO,GAAG/B,IAAI,CAACC,GAAL,EAAxC;AAjDmB;AAAA,mBAkDHnC,mBAAmB,CAACa,GAAD,CAlDhB;;AAAA;AAkDnBqD,YAAAA,OAlDmB;AAmDnBE,YAAAA,UAAU,CAAC,YAAM;AACb,qBAAOpE,mBAAmB,CAACa,GAAD,CAA1B;AACA,qBAAOZ,sBAAsB,CAACY,GAAD,CAA7B;AACH,aAHS,EAGP0B,MAAM,CAAC+B,gBAHA,CAAV,CAnDmB,CAuDnB;AACA;;AACA/B,YAAAA,MAAM,CAACgC,SAAP,CAAiBL,OAAjB,EAA0BrD,GAA1B,EAA+B0B,MAA/B;;AAzDmB;AAAA,kBA8DnBpC,WAAW,CAACU,GAAD,CAAX,IAAoBoD,OAAO,IAAI9D,WAAW,CAACU,GAAD,CA9DvB;AAAA;AAAA;AAAA;;AA+DnBsC,YAAAA,QAAQ,CAAC;AAAEH,cAAAA,YAAY,EAAE;AAAhB,aAAD,CAAR;AA/DmB,8CAgEZ,KAhEY;;AAAA;AAkEvBlD,YAAAA,QAAQ,CAACe,GAAD,EAAMqD,OAAN,CAAR;AACApE,YAAAA,QAAQ,CAAC2C,MAAD,EAAS+B,SAAT,CAAR;AACAd,YAAAA,MAAM,CAACH,OAAP,GAAiB1C,GAAjB,CApEuB,CAqEvB;;AACM4D,YAAAA,QAtEiB,GAsEN;AACbzB,cAAAA,YAAY,EAAE;AADD,aAtEM;;AAyEvB,gBAAI,OAAOC,QAAQ,CAACM,OAAT,CAAiBxB,KAAxB,KAAkC,WAAtC,EAAmD;AAC/C;AACA0C,cAAAA,QAAQ,CAAC1C,KAAT,GAAiByC,SAAjB;AACH;;AACD,gBAAIjC,MAAM,CAACmC,OAAP,CAAezB,QAAQ,CAACM,OAAT,CAAiBzB,IAAhC,EAAsCoC,OAAtC,CAAJ,EAAoD,CAChD;AACA;AACH,aAHD,MAIK;AACD;AACAO,cAAAA,QAAQ,CAAC3C,IAAT,GAAgBoC,OAAhB;AACH,aApFsB,CAqFvB;;;AACAf,YAAAA,QAAQ,CAACsB,QAAD,CAAR;;AACA,gBAAI,CAACT,cAAL,EAAqB;AACjB;AACAnC,cAAAA,cAAc,CAAChB,GAAD,EAAMqD,OAAN,EAAeM,SAAf,CAAd;AACH;;AA1FsB;AAAA;;AAAA;AAAA;AAAA;AA6FvB,mBAAOxE,mBAAmB,CAACa,GAAD,CAA1B;AACA,mBAAOZ,sBAAsB,CAACY,GAAD,CAA7B;AACAf,YAAAA,QAAQ,CAAC2C,MAAD,eAAR;AACAiB,YAAAA,MAAM,CAACH,OAAP,GAAiB1C,GAAjB,CAhGuB,CAiGvB;AACA;;AACA,gBAAIoC,QAAQ,CAACM,OAAT,CAAiBxB,KAAjB,iBAAJ,EAAoC;AAChC;AACAoB,cAAAA,QAAQ,CAAC;AACLH,gBAAAA,YAAY,EAAE,KADT;AAELjB,gBAAAA,KAAK;AAFA,eAAD,CAAR;;AAIA,kBAAI,CAACiC,cAAL,EAAqB;AACjB;AACAnC,gBAAAA,cAAc,CAAChB,GAAD,EAAM2D,SAAN,eAAd;AACH;AACJ,aA7GsB,CA8GvB;;;AACAjC,YAAAA,MAAM,CAACoC,OAAP,eAAoB9D,GAApB,EAAyB0B,MAAzB;;AACA,gBAAIA,MAAM,CAACqC,kBAAX,EAA+B;AAC3B;AACMC,cAAAA,UAFqB,GAER,CAAChB,cAAc,CAACgB,UAAf,IAA6B,CAA9B,IAAmC,CAF3B;AAG3BtC,cAAAA,MAAM,CAACuC,YAAP,eAAyBjE,GAAzB,EAA8B0B,MAA9B,EAAsCqB,UAAtC,EAAkDlB,MAAM,CAACC,MAAP,CAAc;AAAEmB,gBAAAA,MAAM,EAAE;AAAV,eAAd,EAAgCD,cAAhC,EAAgD;AAAEgB,gBAAAA,UAAU,EAAVA;AAAF,eAAhD,CAAlD;AACH;;AApHsB;AAsH3Bd,YAAAA,OAAO,GAAG,KAAV;AAtH2B,8CAuHpB,IAvHoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAwH3B,CAAClD,GAAD,CAxH2B,CAA9B,CA/DqB,CAwLrB;;AACAF,EAAAA,yBAAyB,CAAC,YAAM;AAC5B,QAAI,CAACE,GAAL,EACI,OAAO2D,SAAP,CAFwB,CAG5B;;AACAf,IAAAA,YAAY,CAACF,OAAb,GAAuB,KAAvB,CAJ4B,CAK5B;AACA;AACA;;AACA,QAAMwB,eAAe,GAAG9B,QAAQ,CAACM,OAAT,CAAiBzB,IAAzC;AACA,QAAMkD,eAAe,GAAGnF,QAAQ,CAACgB,GAAD,CAAR,IAAiB0B,MAAM,CAACM,WAAhD,CAT4B,CAU5B;;AACA,QAAIa,MAAM,CAACH,OAAP,KAAmB1C,GAAnB,IACA,CAAC0B,MAAM,CAACmC,OAAP,CAAeK,eAAf,EAAgCC,eAAhC,CADL,EACuD;AACnD7B,MAAAA,QAAQ,CAAC;AAAErB,QAAAA,IAAI,EAAEkD;AAAR,OAAD,CAAR;AACAtB,MAAAA,MAAM,CAACH,OAAP,GAAiB1C,GAAjB;AACH,KAf2B,CAgB5B;;;AACA,QAAMoE,cAAc,GAAG,SAAjBA,cAAiB;AAAA,aAAMrB,UAAU,CAAC;AAAEE,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAhB;AAAA,KAAvB,CAjB4B,CAkB5B;;;AACA,QAAI,CAACvB,MAAM,CAACM,WAAZ,EAAyB;AACrB,UAAI,OAAOmC,eAAP,KAA2B,WAA3B,IACA,CAACvE,SADD,IAEAC,MAAM,CAAC,qBAAD,CAFV,EAEmC;AAC/B;AACA;AACAA,QAAAA,MAAM,CAAC,qBAAD,CAAN,CAA8BuE,cAA9B;AACH,OAND,MAOK;AACDA,QAAAA,cAAc;AACjB;AACJ,KA9B2B,CA+B5B;;;AACA,QAAIC,OAAJ;;AACA,QAAI3C,MAAM,CAAC4C,iBAAX,EAA8B;AAC1B;AACA;AACAD,MAAAA,OAAO,GAAG3E,QAAQ,CAAC0E,cAAD,EAAiB1C,MAAM,CAAC6C,qBAAxB,CAAlB;;AACA,UAAI,CAAClF,kBAAkB,CAACW,GAAD,CAAvB,EAA8B;AAC1BX,QAAAA,kBAAkB,CAACW,GAAD,CAAlB,GAA0B,CAACqE,OAAD,CAA1B;AACH,OAFD,MAGK;AACDhF,QAAAA,kBAAkB,CAACW,GAAD,CAAlB,CAAwBwE,IAAxB,CAA6BH,OAA7B;AACH;AACJ,KA3C2B,CA4C5B;;;AACA,QAAMI,QAAQ,GAAG,SAAXA,QAAW,GAAuE;AAAA,UAAtE/D,gBAAsE,uEAAnD,IAAmD;AAAA,UAA7CgE,WAA6C;AAAA,UAAhCC,YAAgC;AAAA,UAAlB1B,MAAkB,uEAAT,IAAS;AACpF;AACA,UAAMW,QAAQ,GAAG,EAAjB;AACA,UAAIgB,UAAU,GAAG,KAAjB;;AACA,UAAI,OAAOF,WAAP,KAAuB,WAAvB,IACA,CAAChD,MAAM,CAACmC,OAAP,CAAezB,QAAQ,CAACM,OAAT,CAAiBzB,IAAhC,EAAsCyD,WAAtC,CADL,EACyD;AACrDd,QAAAA,QAAQ,CAAC3C,IAAT,GAAgByD,WAAhB;AACAE,QAAAA,UAAU,GAAG,IAAb;AACH,OARmF,CASpF;AACA;;;AACA,UAAIxC,QAAQ,CAACM,OAAT,CAAiBxB,KAAjB,KAA2ByD,YAA/B,EAA6C;AACzCf,QAAAA,QAAQ,CAAC1C,KAAT,GAAiByD,YAAjB;AACAC,QAAAA,UAAU,GAAG,IAAb;AACH;;AACD,UAAIA,UAAJ,EAAgB;AACZtC,QAAAA,QAAQ,CAACsB,QAAD,CAAR;AACH;;AACDf,MAAAA,MAAM,CAACH,OAAP,GAAiB1C,GAAjB;;AACA,UAAIU,gBAAJ,EAAsB;AAClB,YAAIuC,MAAJ,EAAY;AACR,iBAAOmB,cAAc,EAArB;AACH,SAFD,MAGK;AACD,iBAAOrB,UAAU,EAAjB;AACH;AACJ;;AACD,aAAO,KAAP;AACH,KA5BD,CA7C4B,CA0E5B;;;AACA,QAAI,CAAC7D,kBAAkB,CAACc,GAAD,CAAvB,EAA8B;AAC1Bd,MAAAA,kBAAkB,CAACc,GAAD,CAAlB,GAA0B,CAACyE,QAAD,CAA1B;AACH,KAFD,MAGK;AACDvF,MAAAA,kBAAkB,CAACc,GAAD,CAAlB,CAAwBwE,IAAxB,CAA6BC,QAA7B;AACH,KAhF2B,CAiF5B;;;AACA,QAAII,SAAS,GAAG,IAAhB;;AACA,QAAI,OAAOC,gBAAP,KAA4B,WAA5B,IACApD,MAAM,CAACqD,qBADX,EACkC;AAC9BF,MAAAA,SAAS,GAAGC,gBAAgB,CAAC,QAAD,EAAWV,cAAX,CAA5B;AACH;;AACD,WAAO,YAAM;AACT;AACA9B,MAAAA,QAAQ,GAAG;AAAA,eAAM,IAAN;AAAA,OAAX,CAFS,CAGT;;;AACAM,MAAAA,YAAY,CAACF,OAAb,GAAuB,IAAvB;;AACA,UAAI2B,OAAO,IAAIhF,kBAAkB,CAACW,GAAD,CAAjC,EAAwC;AACpC,YAAMgF,YAAY,GAAG3F,kBAAkB,CAACW,GAAD,CAAvC;AACA,YAAMiF,KAAK,GAAGD,YAAY,CAACE,OAAb,CAAqBb,OAArB,CAAd;;AACA,YAAIY,KAAK,IAAI,CAAb,EAAgB;AACZ;AACA;AACAD,UAAAA,YAAY,CAACC,KAAD,CAAZ,GAAsBD,YAAY,CAACA,YAAY,CAACjE,MAAb,GAAsB,CAAvB,CAAlC;AACAiE,UAAAA,YAAY,CAACG,GAAb;AACH;AACJ;;AACD,UAAIjG,kBAAkB,CAACc,GAAD,CAAtB,EAA6B;AACzB,YAAMgF,aAAY,GAAG9F,kBAAkB,CAACc,GAAD,CAAvC;;AACA,YAAMiF,MAAK,GAAGD,aAAY,CAACE,OAAb,CAAqBT,QAArB,CAAd;;AACA,YAAIQ,MAAK,IAAI,CAAb,EAAgB;AACZD,UAAAA,aAAY,CAACC,MAAD,CAAZ,GAAsBD,aAAY,CAACA,aAAY,CAACjE,MAAb,GAAsB,CAAvB,CAAlC;;AACAiE,UAAAA,aAAY,CAACG,GAAb;AACH;AACJ;;AACD,UAAI,OAAOC,mBAAP,KAA+B,WAA/B,IAA8CP,SAAS,KAAK,IAAhE,EAAsE;AAClEO,QAAAA,mBAAmB,CAAC,QAAD,EAAWP,SAAX,CAAnB;AACH;AACJ,KA1BD;AA2BH,GAlHwB,EAkHtB,CAAC7E,GAAD,EAAM+C,UAAN,CAlHsB,CAAzB,CAzLqB,CA4SrB;;AACAjD,EAAAA,yBAAyB,CAAC,YAAM;AAC5B,QAAIuF,KAAK,GAAG,IAAZ;;AACA,QAAMC,IAAI;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA,sBACL,CAAClD,QAAQ,CAACM,OAAT,CAAiBxB,KAAlB,KACCQ,MAAM,CAAC6D,iBAAP,IAA4B/F,iBAAiB,EAD9C,KAEC,CAACkC,MAAM,CAAC8D,kBAAR,IAA8B/F,QAAQ,EAHlC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAOCsD,UAAU,CAAC;AAAEE,kBAAAA,MAAM,EAAE;AAAV,iBAAD,CAPX;;AAAA;AAST,oBAAIvB,MAAM,CAAC+D,eAAX,EAA4B;AACxBJ,kBAAAA,KAAK,GAAG9B,UAAU,CAAC+B,IAAD,EAAO5D,MAAM,CAAC+D,eAAd,CAAlB;AACH;;AAXQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAJH,IAAI;AAAA;AAAA;AAAA,OAAV;;AAaA,QAAI5D,MAAM,CAAC+D,eAAX,EAA4B;AACxBJ,MAAAA,KAAK,GAAG9B,UAAU,CAAC+B,IAAD,EAAO5D,MAAM,CAAC+D,eAAd,CAAlB;AACH;;AACD,WAAO,YAAM;AACT,UAAIJ,KAAJ,EACIK,YAAY,CAACL,KAAD,CAAZ;AACP,KAHD;AAIH,GAtBwB,EAsBtB,CACC3D,MAAM,CAAC+D,eADR,EAEC/D,MAAM,CAAC6D,iBAFR,EAGC7D,MAAM,CAAC8D,kBAHR,EAICzC,UAJD,CAtBsB,CAAzB,CA7SqB,CAyUrB;;AACA,MAAIrB,MAAM,CAACiB,QAAX,EAAqB;AACjB,QAAI/C,SAAJ,EACI,MAAM,IAAI+F,KAAJ,CAAU,+CAAV,CAAN,CAFa,CAGjB;AACA;AACA;;AACA,QAAIC,UAAU,GAAG5G,QAAQ,CAACgB,GAAD,CAAzB;AACA,QAAI6F,WAAW,GAAG7G,QAAQ,CAAC4C,MAAD,CAA1B;;AACA,QAAI,OAAOgE,UAAP,KAAsB,WAAtB,IACA,OAAOC,WAAP,KAAuB,WAD3B,EACwC;AACpC;AACA,UAAI,CAAC1G,mBAAmB,CAACa,GAAD,CAAxB,EAA+B;AAC3B;AACA;AACA+C,QAAAA,UAAU;AACb;;AACD,UAAI5D,mBAAmB,CAACa,GAAD,CAAnB,IACA,OAAOb,mBAAmB,CAACa,GAAD,CAAnB,CAAyBuB,IAAhC,KAAyC,UAD7C,EACyD;AACrD;AACA,cAAMpC,mBAAmB,CAACa,GAAD,CAAzB;AACH,OAXmC,CAYpC;;;AACA4F,MAAAA,UAAU,GAAGzG,mBAAmB,CAACa,GAAD,CAAhC;AACH;;AACD,QAAI,OAAO4F,UAAP,KAAsB,WAAtB,IAAqCC,WAAzC,EAAsD;AAClD;AACA,YAAMA,WAAN;AACH,KA3BgB,CA4BjB;AACA;;;AACA,WAAO;AACH3E,MAAAA,KAAK,EAAE2E,WADJ;AAEH5E,MAAAA,IAAI,EAAE2E,UAFH;AAGH7C,MAAAA,UAAU,EAAVA,UAHG;AAIH5B,MAAAA,MAAM,EAAE2B,WAJL;AAKHX,MAAAA,YAAY,EAAEC,QAAQ,CAACM,OAAT,CAAiBP;AAL5B,KAAP;AAOH,GA/WoB,CAgXrB;AACA;;;AACA,SAAOrD,OAAO,CAAC,YAAM;AACjB,QAAMgH,KAAK,GAAG;AAAE/C,MAAAA,UAAU,EAAVA,UAAF;AAAc5B,MAAAA,MAAM,EAAE2B;AAAtB,KAAd;AACAjB,IAAAA,MAAM,CAACkE,gBAAP,CAAwBD,KAAxB,EAA+B;AAC3B5E,MAAAA,KAAK,EAAE;AACH;AACA;AACA;AACA8E,QAAAA,GAAG,EAAE,eAAY;AACb9D,UAAAA,iBAAiB,CAACQ,OAAlB,CAA0BxB,KAA1B,GAAkC,IAAlC;AACA,iBAAO2B,MAAM,CAACH,OAAP,KAAmB1C,GAAnB,GAAyBoC,QAAQ,CAACM,OAAT,CAAiBxB,KAA1C,GAAkDe,YAAzD;AACH;AAPE,OADoB;AAU3BhB,MAAAA,IAAI,EAAE;AACF+E,QAAAA,GAAG,EAAE,eAAY;AACb9D,UAAAA,iBAAiB,CAACQ,OAAlB,CAA0BzB,IAA1B,GAAiC,IAAjC;AACA,iBAAO4B,MAAM,CAACH,OAAP,KAAmB1C,GAAnB,GAAyBoC,QAAQ,CAACM,OAAT,CAAiBzB,IAA1C,GAAiDe,WAAxD;AACH;AAJC,OAVqB;AAgB3BG,MAAAA,YAAY,EAAE;AACV6D,QAAAA,GAAG,EAAE,eAAY;AACb9D,UAAAA,iBAAiB,CAACQ,OAAlB,CAA0BP,YAA1B,GAAyC,IAAzC;AACA,iBAAOC,QAAQ,CAACM,OAAT,CAAiBP,YAAxB;AACH;AAJS;AAhBa,KAA/B;AAuBA,WAAO2D,KAAP;AACH,GA1Ba,EA0BX,CAAC/C,UAAD,CA1BW,CAAd;AA2BH;;AACD,IAAMkD,SAAS,GAAGtG,gBAAgB,CAACuG,QAAnC;AACA,SAAS1F,OAAT,EAAkBW,MAAlB,EAA0B8E,SAA1B;AACA,eAAezE,MAAf","sourcesContent":["import { useCallback, useContext, useEffect, useLayoutEffect, useState, useRef, useMemo } from 'react';\nimport defaultConfig, { cacheGet, cacheSet, CACHE_REVALIDATORS, CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, MUTATION_TS } from './config';\nimport hash from './libs/hash';\nimport isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online';\nimport throttle from './libs/throttle';\nimport SWRConfigContext from './swr-config-context';\nconst IS_SERVER = typeof window === 'undefined';\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// TODO: introduce namepsace for the cache\nconst getErrorKey = key => (key ? 'err@' + key : '');\nconst getKeyArgs = key => {\n    let args = null;\n    if (typeof key === 'function') {\n        try {\n            key = key();\n        }\n        catch (err) {\n            // dependencies not ready\n            key = '';\n        }\n    }\n    if (Array.isArray(key)) {\n        // args array\n        args = key;\n        key = hash(key);\n    }\n    else {\n        // convert null to ''\n        key = String(key || '');\n    }\n    return [key, args];\n};\nconst NO_DEDUPE = false;\nconst trigger = (_key, shouldRevalidate = true) => {\n    const [key] = getKeyArgs(_key);\n    if (!key)\n        return;\n    const updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        const currentData = cacheGet(key);\n        const currentError = cacheGet(getErrorKey(key));\n        for (let i = 0; i < updaters.length; ++i) {\n            updaters[i](shouldRevalidate, currentData, currentError, NO_DEDUPE);\n        }\n    }\n};\nconst broadcastState = (key, data, error) => {\n    const updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        for (let i = 0; i < updaters.length; ++i) {\n            updaters[i](false, data, error);\n        }\n    }\n};\nconst mutate = async (_key, _data, shouldRevalidate = true) => {\n    const [key] = getKeyArgs(_key);\n    if (!key)\n        return;\n    // if there is no new data, call revalidate against the key\n    if (typeof _data === 'undefined')\n        return trigger(_key, shouldRevalidate);\n    // update timestamp\n    MUTATION_TS[key] = Date.now() - 1;\n    let data, error;\n    if (_data && typeof _data === 'function') {\n        // `_data` is a function, call it passing current cache value\n        try {\n            data = await _data(cacheGet(key));\n        }\n        catch (err) {\n            error = err;\n        }\n    }\n    else if (_data && typeof _data.then === 'function') {\n        // `_data` is a promise\n        try {\n            data = await _data;\n        }\n        catch (err) {\n            error = err;\n        }\n    }\n    else {\n        data = _data;\n    }\n    if (typeof data !== 'undefined') {\n        // update cached data\n        cacheSet(key, data);\n    }\n    // update existing SWR Hooks' state\n    const updaters = CACHE_REVALIDATORS[key];\n    if (updaters) {\n        for (let i = 0; i < updaters.length; ++i) {\n            updaters[i](!!shouldRevalidate, data, error, NO_DEDUPE);\n        }\n    }\n    // throw error or return data to be used by caller of mutate\n    if (error)\n        throw error;\n    return data;\n};\nfunction useSWR(...args) {\n    let _key, fn, config = {};\n    if (args.length >= 1) {\n        _key = args[0];\n    }\n    if (args.length > 2) {\n        fn = args[1];\n        config = args[2];\n    }\n    else {\n        if (typeof args[1] === 'function') {\n            fn = args[1];\n        }\n        else if (typeof args[1] === 'object') {\n            config = args[1];\n        }\n    }\n    // we assume `key` as the identifier of the request\n    // `key` can change but `fn` shouldn't\n    // (because `revalidate` only depends on `key`)\n    const [key, fnArgs] = getKeyArgs(_key);\n    // `keyErr` is the cache key for error objects\n    const keyErr = getErrorKey(key);\n    config = Object.assign({}, defaultConfig, useContext(SWRConfigContext), config);\n    if (typeof fn === 'undefined') {\n        // use a global fetcher\n        fn = config.fetcher;\n    }\n    const initialData = cacheGet(key) || config.initialData;\n    const initialError = cacheGet(keyErr);\n    // if a state is accessed (data, error or isValidating),\n    // we add the state to dependencies so if the state is\n    // updated in the future, we can trigger a rerender\n    const stateDependencies = useRef({\n        data: false,\n        error: false,\n        isValidating: false\n    });\n    const stateRef = useRef({\n        data: initialData,\n        error: initialError,\n        isValidating: false\n    });\n    const rerender = useState(null)[1];\n    let dispatch = useCallback(payload => {\n        let shouldUpdateState = false;\n        for (let k in payload) {\n            stateRef.current[k] = payload[k];\n            if (stateDependencies.current[k]) {\n                shouldUpdateState = true;\n            }\n        }\n        if (shouldUpdateState || config.suspense) {\n            rerender({});\n        }\n    }, []);\n    // error ref inside revalidate (is last request errored?)\n    const unmountedRef = useRef(false);\n    const keyRef = useRef(key);\n    const boundMutate = useCallback((data, shouldRevalidate) => {\n        return mutate(key, data, shouldRevalidate);\n    }, [key]);\n    // start a revalidation\n    const revalidate = useCallback(async (revalidateOpts = {}) => {\n        if (!key || !fn)\n            return false;\n        if (unmountedRef.current)\n            return false;\n        revalidateOpts = Object.assign({ dedupe: false }, revalidateOpts);\n        let loading = true;\n        let shouldDeduping = typeof CONCURRENT_PROMISES[key] !== 'undefined' && revalidateOpts.dedupe;\n        // start fetching\n        try {\n            dispatch({\n                isValidating: true\n            });\n            let newData;\n            let startAt;\n            if (shouldDeduping) {\n                // there's already an ongoing request,\n                // this one needs to be deduplicated.\n                startAt = CONCURRENT_PROMISES_TS[key];\n                newData = await CONCURRENT_PROMISES[key];\n            }\n            else {\n                // if not deduping the request (hard revalidate) but\n                // there're other ongoing request(s) at the same time,\n                // we need to ignore the other result(s) to avoid\n                // possible race conditions:\n                // req1------------------>res1\n                //      req2-------->res2\n                // in that case, the second response should not be overridden\n                // by the first one.\n                if (CONCURRENT_PROMISES[key]) {\n                    // we can mark it as a mutation to ignore\n                    // all requests which are fired before this one\n                    MUTATION_TS[key] = Date.now() - 1;\n                }\n                // if no cache being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && !cacheGet(key)) {\n                    setTimeout(() => {\n                        if (loading)\n                            config.onLoadingSlow(key, config);\n                    }, config.loadingTimeout);\n                }\n                if (fnArgs !== null) {\n                    CONCURRENT_PROMISES[key] = fn(...fnArgs);\n                }\n                else {\n                    CONCURRENT_PROMISES[key] = fn(key);\n                }\n                CONCURRENT_PROMISES_TS[key] = startAt = Date.now();\n                newData = await CONCURRENT_PROMISES[key];\n                setTimeout(() => {\n                    delete CONCURRENT_PROMISES[key];\n                    delete CONCURRENT_PROMISES_TS[key];\n                }, config.dedupingInterval);\n                // trigger the success event,\n                // only do this for the original request.\n                config.onSuccess(newData, key, config);\n            }\n            // if the revalidation happened earlier than the local mutation,\n            // we have to ignore the result because it could override.\n            // meanwhile, a new revalidation should be triggered by the mutation.\n            if (MUTATION_TS[key] && startAt <= MUTATION_TS[key]) {\n                dispatch({ isValidating: false });\n                return false;\n            }\n            cacheSet(key, newData);\n            cacheSet(keyErr, undefined);\n            keyRef.current = key;\n            // new state for the reducer\n            const newState = {\n                isValidating: false\n            };\n            if (typeof stateRef.current.error !== 'undefined') {\n                // we don't have an error\n                newState.error = undefined;\n            }\n            if (config.compare(stateRef.current.data, newData)) {\n                // deep compare to avoid extra re-render\n                // do nothing\n            }\n            else {\n                // data changed\n                newState.data = newData;\n            }\n            // merge the new state\n            dispatch(newState);\n            if (!shouldDeduping) {\n                // also update other hooks\n                broadcastState(key, newData, undefined);\n            }\n        }\n        catch (err) {\n            delete CONCURRENT_PROMISES[key];\n            delete CONCURRENT_PROMISES_TS[key];\n            cacheSet(keyErr, err);\n            keyRef.current = key;\n            // get a new error\n            // don't use deep equal for errors\n            if (stateRef.current.error !== err) {\n                // we keep the stale data\n                dispatch({\n                    isValidating: false,\n                    error: err\n                });\n                if (!shouldDeduping) {\n                    // also broadcast to update other hooks\n                    broadcastState(key, undefined, err);\n                }\n            }\n            // events and retry\n            config.onError(err, key, config);\n            if (config.shouldRetryOnError) {\n                // when retrying, we always enable deduping\n                const retryCount = (revalidateOpts.retryCount || 0) + 1;\n                config.onErrorRetry(err, key, config, revalidate, Object.assign({ dedupe: true }, revalidateOpts, { retryCount }));\n            }\n        }\n        loading = false;\n        return true;\n    }, [key]);\n    // mounted (client side rendering)\n    useIsomorphicLayoutEffect(() => {\n        if (!key)\n            return undefined;\n        // after `key` updates, we need to mark it as mounted\n        unmountedRef.current = false;\n        // after the component is mounted (hydrated),\n        // we need to update the data from the cache\n        // and trigger a revalidation\n        const currentHookData = stateRef.current.data;\n        const latestKeyedData = cacheGet(key) || config.initialData;\n        // update the state if the key changed or cache updated\n        if (keyRef.current !== key ||\n            !config.compare(currentHookData, latestKeyedData)) {\n            dispatch({ data: latestKeyedData });\n            keyRef.current = key;\n        }\n        // revalidate with deduping\n        const softRevalidate = () => revalidate({ dedupe: true });\n        // trigger a revalidation\n        if (!config.initialData) {\n            if (typeof latestKeyedData !== 'undefined' &&\n                !IS_SERVER &&\n                window['requestIdleCallback']) {\n                // delay revalidate if there's cache\n                // to not block the rendering\n                window['requestIdleCallback'](softRevalidate);\n            }\n            else {\n                softRevalidate();\n            }\n        }\n        // whenever the window gets focused, revalidate\n        let onFocus;\n        if (config.revalidateOnFocus) {\n            // throttle: avoid being called twice from both listeners\n            // and tabs being switched quickly\n            onFocus = throttle(softRevalidate, config.focusThrottleInterval);\n            if (!FOCUS_REVALIDATORS[key]) {\n                FOCUS_REVALIDATORS[key] = [onFocus];\n            }\n            else {\n                FOCUS_REVALIDATORS[key].push(onFocus);\n            }\n        }\n        // register global cache update listener\n        const onUpdate = (shouldRevalidate = true, updatedData, updatedError, dedupe = true) => {\n            // update hook state\n            const newState = {};\n            let needUpdate = false;\n            if (typeof updatedData !== 'undefined' &&\n                !config.compare(stateRef.current.data, updatedData)) {\n                newState.data = updatedData;\n                needUpdate = true;\n            }\n            // always update error\n            // because it can be `undefined`\n            if (stateRef.current.error !== updatedError) {\n                newState.error = updatedError;\n                needUpdate = true;\n            }\n            if (needUpdate) {\n                dispatch(newState);\n            }\n            keyRef.current = key;\n            if (shouldRevalidate) {\n                if (dedupe) {\n                    return softRevalidate();\n                }\n                else {\n                    return revalidate();\n                }\n            }\n            return false;\n        };\n        // add updater to listeners\n        if (!CACHE_REVALIDATORS[key]) {\n            CACHE_REVALIDATORS[key] = [onUpdate];\n        }\n        else {\n            CACHE_REVALIDATORS[key].push(onUpdate);\n        }\n        // set up reconnecting when the browser regains network connection\n        let reconnect = null;\n        if (typeof addEventListener !== 'undefined' &&\n            config.revalidateOnReconnect) {\n            reconnect = addEventListener('online', softRevalidate);\n        }\n        return () => {\n            // cleanup\n            dispatch = () => null;\n            // mark it as unmounted\n            unmountedRef.current = true;\n            if (onFocus && FOCUS_REVALIDATORS[key]) {\n                const revalidators = FOCUS_REVALIDATORS[key];\n                const index = revalidators.indexOf(onFocus);\n                if (index >= 0) {\n                    // 10x faster than splice\n                    // https://jsperf.com/array-remove-by-index\n                    revalidators[index] = revalidators[revalidators.length - 1];\n                    revalidators.pop();\n                }\n            }\n            if (CACHE_REVALIDATORS[key]) {\n                const revalidators = CACHE_REVALIDATORS[key];\n                const index = revalidators.indexOf(onUpdate);\n                if (index >= 0) {\n                    revalidators[index] = revalidators[revalidators.length - 1];\n                    revalidators.pop();\n                }\n            }\n            if (typeof removeEventListener !== 'undefined' && reconnect !== null) {\n                removeEventListener('online', reconnect);\n            }\n        };\n    }, [key, revalidate]);\n    // set up polling\n    useIsomorphicLayoutEffect(() => {\n        let timer = null;\n        const tick = async () => {\n            if (!stateRef.current.error &&\n                (config.refreshWhenHidden || isDocumentVisible()) &&\n                (!config.refreshWhenOffline && isOnline())) {\n                // only revalidate when the page is visible\n                // if API request errored, we stop polling in this round\n                // and let the error retry function handle it\n                await revalidate({ dedupe: true });\n            }\n            if (config.refreshInterval) {\n                timer = setTimeout(tick, config.refreshInterval);\n            }\n        };\n        if (config.refreshInterval) {\n            timer = setTimeout(tick, config.refreshInterval);\n        }\n        return () => {\n            if (timer)\n                clearTimeout(timer);\n        };\n    }, [\n        config.refreshInterval,\n        config.refreshWhenHidden,\n        config.refreshWhenOffline,\n        revalidate\n    ]);\n    // suspense\n    if (config.suspense) {\n        if (IS_SERVER)\n            throw new Error('Suspense on server side is not yet supported!');\n        // in suspense mode, we can't return empty state\n        // (it should be suspended)\n        // try to get data and error from cache\n        let latestData = cacheGet(key);\n        let latestError = cacheGet(keyErr);\n        if (typeof latestData === 'undefined' &&\n            typeof latestError === 'undefined') {\n            // need to start the request if it hasn't\n            if (!CONCURRENT_PROMISES[key]) {\n                // trigger revalidate immediately\n                // to get the promise\n                revalidate();\n            }\n            if (CONCURRENT_PROMISES[key] &&\n                typeof CONCURRENT_PROMISES[key].then === 'function') {\n                // if it is a promise\n                throw CONCURRENT_PROMISES[key];\n            }\n            // it's a value, return it directly (override)\n            latestData = CONCURRENT_PROMISES[key];\n        }\n        if (typeof latestData === 'undefined' && latestError) {\n            // in suspense mode, throw error if there's no content\n            throw latestError;\n        }\n        // return the latest data / error from cache\n        // in case `key` has changed\n        return {\n            error: latestError,\n            data: latestData,\n            revalidate,\n            mutate: boundMutate,\n            isValidating: stateRef.current.isValidating\n        };\n    }\n    // define returned state\n    // can be memorized since the state is a ref\n    return useMemo(() => {\n        const state = { revalidate, mutate: boundMutate };\n        Object.defineProperties(state, {\n            error: {\n                // `key` might be changed in the upcoming hook re-render,\n                // but the previous state will stay\n                // so we need to match the latest key and data (fallback to `initialData`)\n                get: function () {\n                    stateDependencies.current.error = true;\n                    return keyRef.current === key ? stateRef.current.error : initialError;\n                }\n            },\n            data: {\n                get: function () {\n                    stateDependencies.current.data = true;\n                    return keyRef.current === key ? stateRef.current.data : initialData;\n                }\n            },\n            isValidating: {\n                get: function () {\n                    stateDependencies.current.isValidating = true;\n                    return stateRef.current.isValidating;\n                }\n            }\n        });\n        return state;\n    }, [revalidate]);\n}\nconst SWRConfig = SWRConfigContext.Provider;\nexport { trigger, mutate, SWRConfig };\nexport default useSWR;\n"]},"metadata":{},"sourceType":"module"}
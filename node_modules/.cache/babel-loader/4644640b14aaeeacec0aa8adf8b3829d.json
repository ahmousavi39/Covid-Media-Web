{"ast":null,"code":"import axios from 'axios';\nconst url = \"https://corona.lmao.ninja/v3/covid-19\";\nconst urlHisory = 'https://disease.sh/v3/covid-19/historical';\nexport const fetchData = async country => {\n  let changeableUrl = `${url}/all`;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: {\n        updated,\n        cases,\n        todayCases,\n        deaths,\n        todayDeaths,\n        recovered,\n        todayRecovered,\n        active,\n        critical,\n        tests\n      }\n    } = await axios.get(changeableUrl);\n    const modifieData = {\n      updated,\n      cases,\n      todayCases,\n      deaths,\n      todayDeaths,\n      recovered,\n      todayRecovered,\n      active,\n      critical,\n      tests\n    };\n    return modifieData;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchHistoricalData = async country => {\n  let changeableUrl = `${urlHisory}/all?lastdays=all`;\n\n  if (country) {\n    changeableUrl = `${urlHisory}/${country}?lastdays=all`;\n  }\n\n  try {\n    let data = await axios.get(changeableUrl);\n\n    if (country) {\n      data = data.data.timeline;\n    } else {\n      data = data.data;\n    }\n\n    let casesArray = [];\n    let deathsArray = [];\n    let recoveredArray = [];\n    let dateArray = [];\n    let newCasesArray = [];\n    let newDeathsArray = [];\n    let newRecoveredArray = [];\n\n    for (const [key, value] of Object.entries(data.cases)) {\n      casesArray.push(value);\n      dateArray.push(key);\n    }\n\n    for (const [key, value] of Object.entries(data.deaths)) {\n      deathsArray.push(value);\n    }\n\n    for (const [key, value] of Object.entries(data.recovered)) {\n      recoveredArray.push(value);\n    }\n\n    casesArray.map((value, index) => {\n      if (index == 0) {\n        var splitted = dateArray[index].split(\"/\");\n        var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n        const dateFinal = new Date(dateStr);\n        newCasesArray.push({\n          'x': dateFinal,\n          'y': value\n        });\n      } else {\n        let lastIndex = index - 1;\n        let lastIndexValue = casesArray[lastIndex];\n        let newIndexValue = value - lastIndexValue;\n        var splitted = dateArray[index].split(\"/\");\n        var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n        const dateFinal = new Date(dateStr);\n        newCasesArray.push({\n          'x': dateFinal,\n          'y': newIndexValue\n        });\n      }\n    });\n    deathsArray.map((value, index) => {\n      if (index == 0) {\n        var splitted = dateArray[index].split(\"/\");\n        var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n        const dateFinal = new Date(dateStr);\n        newDeathsArray.push({\n          'x': dateFinal,\n          'y': value\n        });\n      } else {\n        let lastIndex = index - 1;\n        let lastIndexValue = deathsArray[lastIndex];\n        let newIndexValue = value - lastIndexValue;\n        var splitted = dateArray[index].split(\"/\");\n        var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n        const dateFinal = new Date(dateStr);\n        newDeathsArray.push({\n          'x': dateFinal,\n          'y': newIndexValue\n        });\n      }\n    });\n    recoveredArray.map((value, index) => {\n      if (index == 0) {\n        var splitted = dateArray[index].split(\"/\");\n        var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n        const dateFinal = new Date(dateStr);\n        newRecoveredArray.push({\n          'x': dateFinal,\n          'y': value\n        });\n      } else {\n        let lastIndex = index - 1;\n        let lastIndexValue = recoveredArray[lastIndex];\n        let newIndexValue;\n\n        if (!country) {\n          switch (index) {\n            case 325:\n              newIndexValue = 516003;\n              break;\n\n            case 326:\n              newIndexValue = 411665;\n              break;\n\n            case 327:\n              newIndexValue = 527725;\n              break;\n\n            case 328:\n              newIndexValue = 499836;\n              break;\n\n            case 329:\n              newIndexValue = 598651;\n              break;\n\n            default:\n              newIndexValue = value - lastIndexValue;\n          }\n        } else {\n          newIndexValue = value - lastIndexValue;\n        }\n\n        var splitted = dateArray[index].split(\"/\");\n        var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n        const dateFinal = new Date(dateStr);\n        newRecoveredArray.push({\n          'x': dateFinal,\n          'y': newIndexValue\n        });\n      }\n    }); // newCasesArray = newCasesArray.slice(-30);\n    // newDeathsArray = newDeathsArray.slice(-30);\n    // newRecoveredArray = newRecoveredArray.slice(-30);\n\n    return [newCasesArray, newDeathsArray, newRecoveredArray];\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(`${url}/countries`);\n    return data.map(data => data.country);\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/api/index.js"],"names":["axios","url","urlHisory","fetchData","country","changeableUrl","data","updated","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","critical","tests","get","modifieData","error","console","log","fetchHistoricalData","timeline","casesArray","deathsArray","recoveredArray","dateArray","newCasesArray","newDeathsArray","newRecoveredArray","key","value","Object","entries","push","map","index","splitted","split","dateStr","dateFinal","Date","lastIndex","lastIndexValue","newIndexValue","fetchCountries"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst url = \"https://corona.lmao.ninja/v3/covid-19\";\nconst urlHisory = 'https://disease.sh/v3/covid-19/historical'\n\nexport const fetchData = async (country) => {\n    let changeableUrl = `${url}/all`;\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        const { data: {\n            updated,\n            cases,\n            todayCases,\n            deaths,\n            todayDeaths,\n            recovered,\n            todayRecovered,\n            active,\n            critical,\n            tests\n        } } = await axios.get(changeableUrl);\n\n        const modifieData = {\n            updated,\n            cases,\n            todayCases,\n            deaths,\n            todayDeaths,\n            recovered,\n            todayRecovered,\n            active,\n            critical,\n            tests\n        };\n\n        return modifieData;\n    } catch (error) {\n        console.log(error);\n\n    }\n}\n\n\n\nexport const fetchHistoricalData = async (country) => {\n    let changeableUrl = `${urlHisory}/all?lastdays=all`;\n    if (country) {\n        changeableUrl = `${urlHisory}/${country}?lastdays=all`\n    }\n\n    try {\n\n        let data = await axios.get(changeableUrl);\n\n        if (country) {\n            data = data.data.timeline;\n        } else {\n            data = data.data;\n        }\n\n        let casesArray = [];\n        let deathsArray = [];\n        let recoveredArray = [];\n\n        let dateArray = [];\n\n        let newCasesArray = [];\n        let newDeathsArray = [];\n        let newRecoveredArray = [];\n\n\n        for (const [key, value] of Object.entries(data.cases)) {\n            casesArray.push(value);\n            dateArray.push(key);\n        }\n\n        for (const [key, value] of Object.entries(data.deaths)) {\n            deathsArray.push(value);\n        }\n\n        for (const [key, value] of Object.entries(data.recovered)) {\n            recoveredArray.push(value);\n        }\n\n        casesArray.map((value, index) => {\n            if (index == 0) {\n                var splitted = dateArray[index].split(\"/\");\n                var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n                const dateFinal = new Date(dateStr);\n                newCasesArray.push({ 'x': dateFinal, 'y': value });\n            } else {\n                let lastIndex = index - 1;\n                let lastIndexValue = casesArray[lastIndex];\n                let newIndexValue = value - lastIndexValue;\n\n                var splitted = dateArray[index].split(\"/\");\n                var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n                const dateFinal = new Date(dateStr);\n                newCasesArray.push({ 'x': dateFinal, 'y': newIndexValue });\n            }\n        })\n\n        deathsArray.map((value, index) => {\n            if (index == 0) {\n                var splitted = dateArray[index].split(\"/\");\n                var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n                const dateFinal = new Date(dateStr);\n                newDeathsArray.push({ 'x': dateFinal, 'y': value });\n            } else {\n                let lastIndex = index - 1;\n                let lastIndexValue = deathsArray[lastIndex];\n                let newIndexValue = value - lastIndexValue;\n\n                var splitted = dateArray[index].split(\"/\");\n                var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n                const dateFinal = new Date(dateStr);\n                newDeathsArray.push({ 'x': dateFinal, 'y': newIndexValue });\n            }\n        })\n\n        recoveredArray.map((value, index) => {\n            if (index == 0) {\n                var splitted = dateArray[index].split(\"/\");\n                var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n                const dateFinal = new Date(dateStr);\n                newRecoveredArray.push({ 'x': dateFinal, 'y': value });\n            } else {\n                let lastIndex = index - 1;\n                let lastIndexValue = recoveredArray[lastIndex];\n                let newIndexValue;\n\n                if (!country) {\n                    switch (index) {\n                        case 325:\n                            newIndexValue = 516003;\n                            break;\n                        case 326:\n                            newIndexValue = 411665;\n                            break;\n                        case 327:\n                            newIndexValue = 527725;\n                            break;\n                        case 328:\n                            newIndexValue = 499836;\n                            break;\n                        case 329:\n                            newIndexValue = 598651;\n                            break;\n                        default:\n                            newIndexValue = value - lastIndexValue;\n                    }\n                } else {\n                    newIndexValue = value - lastIndexValue;\n                }\n                var splitted = dateArray[index].split(\"/\");\n                var dateStr = \"20\" + splitted[2] + \"-\" + splitted[0] + \"-\" + splitted[1];\n                const dateFinal = new Date(dateStr);\n                newRecoveredArray.push({ 'x': dateFinal, 'y': newIndexValue });\n            }\n        })\n\n        // newCasesArray = newCasesArray.slice(-30);\n        // newDeathsArray = newDeathsArray.slice(-30);\n        // newRecoveredArray = newRecoveredArray.slice(-30);\n\n        return [newCasesArray, newDeathsArray, newRecoveredArray];\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n\n\nexport const fetchCountries = async () => {\n    try {\n        const { data } = await axios.get(`${url}/countries`)\n        return data.map((data) => data.country)\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}
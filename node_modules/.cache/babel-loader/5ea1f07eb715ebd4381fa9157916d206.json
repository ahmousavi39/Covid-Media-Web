{"ast":null,"code":"import React,{useRef,useEffect}from\"react\";import mapboxgl from\"mapbox-gl\";import useSWR from\"swr\";import lookup from\"country-code-lookup\";import\"./Map.scss\";// Need mapbox css for tooltips later in the tutorial\nimport\"mapbox-gl/dist/mapbox-gl.css\";mapboxgl.accessToken=\"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";function App(){var mapboxElRef=useRef(null);// DOM element to render map\nvar fetcher=function fetcher(url){return fetch(url).then(function(r){return r.json();}).then(function(data){return data.map(function(point,index){return{type:\"Feature\",geometry:{type:\"Point\",coordinates:[point.coordinates.longitude,point.coordinates.latitude]},properties:{id:index,country:point.country,province:point.province,cases:point.stats.confirmed,deaths:point.stats.deaths}};});});};var _useSWR=useSWR(\"https://corona.lmao.ninja/v2/jhucsse\",fetcher),data=_useSWR.data;// Initialize our map\nuseEffect(function(){if(data){var map=new mapboxgl.Map({container:mapboxElRef.current,style:\"mapbox://styles/notalemesa/ck8dqwdum09ju1ioj65e3ql3k\",center:[16,27],zoom:1.8});// Add navigation controls to the top right of the canvas\nmap.addControl(new mapboxgl.NavigationControl());map.once(\"load\",function(){// Add our SOURCE\nmap.addSource(\"points\",{type:\"geojson\",data:{type:\"FeatureCollection\",features:data}});// Add our layer\nmap.addLayer({id:\"circles\",source:\"points\",// this should be the id of source\ntype:\"circle\",paint:{\"circle-opacity\":0.75,\"circle-stroke-width\":[\"interpolate\",[\"linear\"],[\"get\",\"cases\"],1,1,100000,1.75],\"circle-radius\":[\"interpolate\",[\"linear\"],[\"get\",\"cases\"],1,4,100000,8,400000,10,800000,14,1200000,18,10000000,40],\"circle-color\":[\"interpolate\",[\"linear\"],[\"get\",\"cases\"],1,\"#ffffb2\",5000,\"#fed976\",10000,\"#feb24c\",25000,\"#fd8d3c\",50000,\"#fc4e2a\",75000,\"#e31a1c\",100000,\"#b10026\"]}});var popup=new mapboxgl.Popup({closeButton:false,closeOnClick:false});var lastId;map.on(\"mousemove\",\"circles\",function(e){var id=e.features[0].properties.id;if(id!==lastId){var _lookup$byCountry,_lookup$byInternet;lastId=id;var _e$features$0$propert=e.features[0].properties,cases=_e$features$0$propert.cases,deaths=_e$features$0$propert.deaths,country=_e$features$0$propert.country,province=_e$features$0$propert.province;// Change the pointer type on mouseenter\nmap.getCanvas().style.cursor=\"pointer\";var coordinates=e.features[0].geometry.coordinates.slice();var countryISO=((_lookup$byCountry=lookup.byCountry(country))===null||_lookup$byCountry===void 0?void 0:_lookup$byCountry.iso2)||((_lookup$byInternet=lookup.byInternet(country))===null||_lookup$byInternet===void 0?void 0:_lookup$byInternet.iso2);var provinceHTML=province!==\"null\"?\"<p>Province: <b>\".concat(province,\"</b></p>\"):\"\";var mortalityRate=(deaths/cases*100).toFixed(2);var countryFlagHTML=Boolean(countryISO)?\"<img src=\\\"https://www.countryflags.io/\".concat(countryISO,\"/flat/64.png\\\"></img>\"):\"\";var HTML=\"<p>Country: <b>\".concat(country,\"</b></p>\\n                \").concat(provinceHTML,\"\\n                <p>Cases: <b>\").concat(cases,\"</b></p>\\n                <p>Deaths: <b>\").concat(deaths,\"</b></p>\\n                <p>Mortality Rate: <b>\").concat(mortalityRate,\"%</b></p>\\n                \").concat(countryFlagHTML);// Ensure that if the map is zoomed out such that multiple\n// copies of the feature are visible, the popup appears\n// over the copy being pointed to.\nwhile(Math.abs(e.lngLat.lng-coordinates[0])>180){coordinates[0]+=e.lngLat.lng>coordinates[0]?360:-360;}popup.setLngLat(coordinates).setHTML(HTML).addTo(map);}});map.on(\"mouseleave\",\"circles\",function(){lastId=undefined;map.getCanvas().style.cursor=\"\";popup.remove();});});}},[data]);return/*#__PURE__*/React.createElement(\"div\",{className:\"html\"},/*#__PURE__*/React.createElement(\"div\",{className:\"body\"},/*#__PURE__*/React.createElement(\"div\",{className:\"root\"},/*#__PURE__*/React.createElement(\"div\",{id:\"App\"},/*#__PURE__*/React.createElement(\"div\",{className:\"mapContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"mapBox\",ref:mapboxElRef}))))));}export default App;","map":{"version":3,"sources":["/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/components/Map/Map.js"],"names":["React","useRef","useEffect","mapboxgl","useSWR","lookup","accessToken","App","mapboxElRef","fetcher","url","fetch","then","r","json","data","map","point","index","type","geometry","coordinates","longitude","latitude","properties","id","country","province","cases","stats","confirmed","deaths","Map","container","current","style","center","zoom","addControl","NavigationControl","once","addSource","features","addLayer","source","paint","popup","Popup","closeButton","closeOnClick","lastId","on","e","getCanvas","cursor","slice","countryISO","byCountry","iso2","byInternet","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","Math","abs","lngLat","lng","setLngLat","setHTML","addTo","undefined","remove"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport useSWR from \"swr\";\nimport lookup from \"country-code-lookup\";\nimport \"./Map.scss\";\n// Need mapbox css for tooltips later in the tutorial\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\n\nfunction App() {\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  const fetcher = url =>\n    fetch(url)\n      .then(r => r.json())\n      .then(data =>\n        data.map((point, index) => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [\n              point.coordinates.longitude,\n              point.coordinates.latitude\n            ]\n          },\n          properties: {\n            id: index,\n            country: point.country,\n            province: point.province,\n            cases: point.stats.confirmed,\n            deaths: point.stats.deaths\n          }\n        }))\n      );\n\n  const { data } = useSWR(\"https://corona.lmao.ninja/v2/jhucsse\", fetcher);\n\n  // Initialize our map\n  useEffect(() => {\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: \"mapbox://styles/notalemesa/ck8dqwdum09ju1ioj65e3ql3k\",\n        center: [16, 27],\n        zoom: 1.8\n      });\n\n      // Add navigation controls to the top right of the canvas\n      map.addControl(new mapboxgl.NavigationControl());\n\n      map.once(\"load\", function() {\n        // Add our SOURCE\n        map.addSource(\"points\", {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: data\n          }\n        });\n\n        // Add our layer\n        map.addLayer({\n          id: \"circles\",\n          source: \"points\", // this should be the id of source\n          type: \"circle\",\n          paint: {\n            \"circle-opacity\": 0.75,\n            \"circle-stroke-width\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              1,\n              100000,\n              1.75\n            ],\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              4,\n              100000,\n              8,\n              400000,\n              10,\n              800000,\n              14,\n              1200000,\n              18,\n              10000000,\n              40\n            ],\n            \"circle-color\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              \"#ffffb2\",\n              5000,\n              \"#fed976\",\n              10000,\n              \"#feb24c\",\n              25000,\n              \"#fd8d3c\",\n              50000,\n              \"#fc4e2a\",\n              75000,\n              \"#e31a1c\",\n              100000,\n              \"#b10026\"\n            ]\n          }\n        });\n\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n\n        let lastId;\n\n        map.on(\"mousemove\", \"circles\", e => {\n          const id = e.features[0].properties.id;\n\n          if (id !== lastId) {\n            lastId = id;\n            const {\n              cases,\n              deaths,\n              country,\n              province\n            } = e.features[0].properties;\n\n            // Change the pointer type on mouseenter\n            map.getCanvas().style.cursor = \"pointer\";\n\n            const coordinates = e.features[0].geometry.coordinates.slice();\n\n            const countryISO =\n              lookup.byCountry(country)?.iso2 ||\n              lookup.byInternet(country)?.iso2;\n            const provinceHTML =\n              province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n            const countryFlagHTML = Boolean(countryISO)\n              ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>`\n              : \"\";\n\n            const HTML = `<p>Country: <b>${country}</b></p>\n                ${provinceHTML}\n                <p>Cases: <b>${cases}</b></p>\n                <p>Deaths: <b>${deaths}</b></p>\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n                ${countryFlagHTML}`;\n\n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            popup\n              .setLngLat(coordinates)\n              .setHTML(HTML)\n              .addTo(map);\n          }\n        });\n\n        map.on(\"mouseleave\", \"circles\", function() {\n          lastId = undefined;\n          map.getCanvas().style.cursor = \"\";\n          popup.remove();\n        });\n      });\n    }\n  }, [data]);\n\n  return (\n    <div className='html'> \n      <div className='body'>\n      <div className='root'>\n    <div id=\"App\">\n      <div className=\"mapContainer\">\n        {/* Mapbox Container */}\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n    </div>\n  </div>\n  </div> \n   </div>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import i18n from'i18next';import Backend from'i18next-xhr-backend';import LanguageDetector from'i18next-browser-languagedetector';import{initReactI18next}from'react-i18next';var pathname=window.location.pathname;pathname.indexOf(1);pathname.toLowerCase();pathname=pathname.split(\"/\")[1];var fallbackLng;if(pathname=='per'||pathname=='en'||pathname=='gr'||pathname=='tr'){fallbackLng=[pathname];}else{fallbackLng=['en'];}var availableLanguages=['tr','en','per','gr'// , 'ar'\n];var options={// order and from where user language should be detected\norder:['navigator','htmlTag','path','subdomain'],// keys or params to lookup language from\nlookupQuerystring:'lng',lookupCookie:'i18next',lookupLocalStorage:'i18nextLng',lookupFromPathIndex:0,lookupFromSubdomainIndex:0,// cache user language on\ncaches:['localStorage','cookie'],excludeCacheFor:['cimode'],// languages to not persist (cookie, localStorage)\n// optional expire and domain for set cookie\ncookieMinutes:10,cookieDomain:'myDomain',// optional htmlTag with lang attribute, the default is:\nhtmlTag:document.documentElement,// only detect languages that are in the whitelist\ncheckWhitelist:true};i18n.use(Backend)// load translation using xhr -> see /public/locales. We will add locales in the next step\n// .use(LanguageDetector) // detect user language\n.use(initReactI18next)// pass the i18n instance to react-i18next.\n.init({fallbackLng:fallbackLng,// if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\ndebug:true,whitelist:availableLanguages,detection:options,interpolation:{escapeValue:false}});export default i18n;","map":{"version":3,"sources":["/home/workspace/Desktop/Files/Projects/Programming/Working On/Covid Media/Web/covidmedia_v.3.1.0/src/i18n.js"],"names":["i18n","Backend","LanguageDetector","initReactI18next","pathname","window","location","indexOf","toLowerCase","split","fallbackLng","availableLanguages","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","use","init","debug","whitelist","detection","interpolation","escapeValue"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,SAAjB,CACA,MAAOC,CAAAA,OAAP,KAAoB,qBAApB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,kCAA7B,CACA,OAASC,gBAAT,KAAiC,eAAjC,CAEA,GAAIC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,QAAP,CAAgBF,QAA/B,CAEAA,QAAQ,CAACG,OAAT,CAAiB,CAAjB,EAEAH,QAAQ,CAACI,WAAT,GAEAJ,QAAQ,CAAGA,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX,CAEA,GAAIC,CAAAA,WAAJ,CAEA,GAAGN,QAAQ,EAAI,KAAZ,EAAqBA,QAAQ,EAAI,IAAjC,EAAyCA,QAAQ,EAAI,IAArD,EAA6DA,QAAQ,EAAI,IAA5E,CAAkF,CAC/EM,WAAW,CAAG,CAACN,QAAD,CAAd,CACF,CAFD,IAEK,CACFM,WAAW,CAAG,CAAC,IAAD,CAAd,CACF,CAED,GAAMC,CAAAA,kBAAkB,CAAG,CAAC,IAAD,CAAO,IAAP,CAAa,KAAb,CAAoB,IAC/C;AAD2B,CAA3B,CAOA,GAAMC,CAAAA,OAAO,CAAG,CACd;AACAC,KAAK,CAAE,CAAE,WAAF,CAAe,SAAf,CAA0B,MAA1B,CAAkC,WAAlC,CAFO,CAId;AACAC,iBAAiB,CAAE,KALL,CAMdC,YAAY,CAAE,SANA,CAOdC,kBAAkB,CAAE,YAPN,CAQdC,mBAAmB,CAAE,CARP,CASdC,wBAAwB,CAAE,CATZ,CAWd;AACAC,MAAM,CAAE,CAAC,cAAD,CAAiB,QAAjB,CAZM,CAadC,eAAe,CAAE,CAAC,QAAD,CAbH,CAae;AAE7B;AACAC,aAAa,CAAE,EAhBD,CAiBdC,YAAY,CAAE,UAjBA,CAmBd;AACAC,OAAO,CAAEC,QAAQ,CAACC,eApBJ,CAsBd;AACAC,cAAc,CAAE,IAvBF,CAAhB,CA0BA1B,IAAI,CACD2B,GADH,CACO1B,OADP,CACgB;AAEd;AAHF,CAKG0B,GALH,CAKOxB,gBALP,CAKyB;AALzB,CAOGyB,IAPH,CAOQ,CACJlB,WAAW,CAAXA,WADI,CACS;AACbmB,KAAK,CAAE,IAFH,CAGJC,SAAS,CAAEnB,kBAHP,CAIJoB,SAAS,CAAEnB,OAJP,CAMJoB,aAAa,CAAE,CACbC,WAAW,CAAE,KADA,CANX,CAPR,EAkBA,cAAejC,CAAAA,IAAf","sourcesContent":["import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\nvar pathname = window.location.pathname;\n\npathname.indexOf(1);\n\npathname.toLowerCase();\n\npathname = pathname.split(\"/\")[1];\n\nvar fallbackLng ;\n\nif(pathname == 'per' || pathname == 'en' || pathname == 'gr' || pathname == 'tr' ){\n   fallbackLng = [pathname];\n}else{\n   fallbackLng = ['en'];\n}\n\nconst availableLanguages = ['tr', 'en', 'per', 'gr'\n// , 'ar'\n];\n\n\n\n\nconst options = {\n  // order and from where user language should be detected\n  order: [ 'navigator', 'htmlTag', 'path', 'subdomain'],\n\n  // keys or params to lookup language from\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n\n  // cache user language on\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\n\n  // optional expire and domain for set cookie\n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement,\n\n  // only detect languages that are in the whitelist\n  checkWhitelist: true\n}\n\ni18n\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\n\n  // .use(LanguageDetector) // detect user language\n\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\n\n  .init({\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\n    debug: true,\n    whitelist: availableLanguages,\n    detection: options,\n\n    interpolation: {\n      escapeValue: false\n    },\n  });\n\nexport default i18n;"]},"metadata":{},"sourceType":"module"}